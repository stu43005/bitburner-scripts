{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":866,\"hp\":18,\"max_hp\":18,\"strength\":86,\"defense\":86,\"dexterity\":91,\"agility\":91,\"charisma\":86,\"intelligence\":0,\"hacking_chance_mult\":1.4138812745065006,\"hacking_speed_mult\":1.3880122101948527,\"hacking_money_mult\":1.6030399937715425,\"hacking_grow_mult\":1.282431995017234,\"hacking_exp\":2384054661.763724,\"strength_exp\":3758.7821440284433,\"defense_exp\":3758.7821440284433,\"dexterity_exp\":3758.7821440284433,\"agility_exp\":3758.7821440284433,\"charisma_exp\":3758.7821440284433,\"intelligence_exp\":0,\"hacking_mult\":1.7645916968852893,\"strength_mult\":1.282431995017234,\"defense_mult\":1.282431995017234,\"dexterity_mult\":1.3465535947680958,\"agility_mult\":1.3465535947680958,\"charisma_mult\":1.282431995017234,\"hacking_exp_mult\":2.448623552486109,\"strength_exp_mult\":1.622276473696801,\"defense_exp_mult\":1.622276473696801,\"dexterity_exp_mult\":1.622276473696801,\"agility_exp_mult\":1.622276473696801,\"charisma_exp_mult\":1.622276473696801,\"company_rep_mult\":1.282431995017234,\"faction_rep_mult\":1.282431995017234,\"money\":333080360135.348,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{\"Alpha Enterprises\":\"Software Consultant\"},\"companyName\":\"Alpha Enterprises\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":48015.199999871795,\"ram\":64,\"totalMoneyGenerated\":1277921797.2719705,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":47964.19999987254,\"ram\":64,\"totalMoneyGenerated\":1274575722.2178807,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":47753.999999875596,\"ram\":64,\"totalMoneyGenerated\":1271122343.2988584,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":47555.99999987848,\"ram\":64,\"totalMoneyGenerated\":1269731035.412111,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":47111.79999988653,\"ram\":64,\"totalMoneyGenerated\":1269258072.0727482,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":46994.799999888724,\"ram\":64,\"totalMoneyGenerated\":1268698771.3949676,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":46892.79999989063,\"ram\":64,\"totalMoneyGenerated\":1268115944.0413728,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":46706.599999894126,\"ram\":64,\"totalMoneyGenerated\":1267607365.7859678,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":46292.59999990153,\"ram\":64,\"totalMoneyGenerated\":1267061851.330483,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":46184.39999990339,\"ram\":64,\"totalMoneyGenerated\":1266484403.6439393,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":46118.399999904526,\"ram\":64,\"totalMoneyGenerated\":1265942083.5837348,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":45746.19999991092,\"ram\":64,\"totalMoneyGenerated\":1265204368.7804015,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":45427.999999916414,\"ram\":64,\"totalMoneyGenerated\":1264936702.7838793,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":44947.7999999247,\"ram\":64,\"totalMoneyGenerated\":1263472616.4757361,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":43660.19999994526,\"ram\":64,\"totalMoneyGenerated\":1259656047.161454,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":42855.399999956935,\"ram\":64,\"totalMoneyGenerated\":1246471046.128163,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":42356.999999962674,\"ram\":64,\"totalMoneyGenerated\":1236761381.8738744,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":41614.99999996587,\"ram\":64,\"totalMoneyGenerated\":1220159259.5372279,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":40928.399999974084,\"ram\":64,\"totalMoneyGenerated\":1203048542.228534,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":38652.99999999836,\"ram\":64,\"totalMoneyGenerated\":1142750196.7134328,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":36947.20000002027,\"ram\":64,\"totalMoneyGenerated\":1094144349.3653126,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":36431.000000027794,\"ram\":64,\"totalMoneyGenerated\":1079335320.4479835,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":29663.808342631313,\"onlineTimeSeconds\":34103.000000060136,\"ram\":64,\"totalMoneyGenerated\":1009033439.7228993,\"name\":\"hacknet-node-22\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Sector-12\",\"CyberSec\",\"NiteSec\",\"The Black Hand\",\"BitRunners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":26,\"name\":\"NeuroFlux Governor\"},{\"level\":27,\"name\":\"NeuroFlux Governor\"},{\"level\":28,\"name\":\"NeuroFlux Governor\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":25,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"DataJack\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.282431995017234,\"crime_success_mult\":1.282431995017234,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"The Black Hand\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.36729353287291633,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":1.2648507472681654,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":5032.362152599041,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":17141.04612903582,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":3422600,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.282431995017234,\"hacknet_node_money_mult\":3.2344137194329967,\"hacknet_node_purchase_cost_mult\":0.595033339940347,\"hacknet_node_ram_cost_mult\":0.7778213593991465,\"hacknet_node_core_cost_mult\":0.7778213593991465,\"hacknet_node_level_cost_mult\":0.6611481554892745,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1641577151973,\"totalPlaytime\":277999600,\"playtimeSinceLastAug\":48023400,\"playtimeSinceLastBitnode\":277999600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1605950456020.119,\"hacknet\":28251492663.05676,\"hacknet_expenses\":-8212000856.581205,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":3318811361450.573,\"total\":333080359135.348,\"work\":0,\"servers\":-3621890706260.697,\"other\":-313700000,\"augmentations\":-989516543945.2653}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":825000000,\"corporation\":0,\"crime\":433142.682251232,\"gang\":0,\"hacking\":2991224609494.966,\"hacknet\":63866233831.95758,\"hacknet_expenses\":-109629375359.92416,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":3287611361450.573,\"total\":398956280202.43225,\"work\":6372.6850381893755,\"servers\":-4345549364277.292,\"other\":-6314500000,\"augmentations\":-1483078124547.7002}},\"scriptProdSinceLastAug\":5171937466329.862,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"53.0.7.7\",\"isConnectedTo\":true,\"maxRam\":32768,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":17703.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":42,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":747,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/steamsplay/auto_farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":42632446.58254616,\"onlineMoneyMade\":17106145761,\"onlineRunningTime\":1368.8100000001743,\"pid\":972,\"ramUsage\":12.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/steamsplay/auto_farm.js\",\"url\":\"blob:file:///c711b7f9-2477-4969-9695-747a1bbabc89\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.210000000000164,\"pid\":2510,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":749,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.210000000000164,\"pid\":2511,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":8613,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":275}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n\\tconst servers = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n    for(const server of servers) {\\n        const used = ns.getServerUsedRam(server);\\n        const max = ns.getServerMaxRam(server);\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100*used/max).toFixed(2)}%)`)\\n    }\\n}\",\"filename\":\"/bitburner-scripts-master/opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitburner-scripts-master/opened_servers.js\",\"url\":\"blob:file:///56fc904f-4f23-426b-89a7-8a85078ff33e\"}],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"cb62a5da60ce56dcc8e89a4261710b8f67054b43ba3172d9e28bcbceeba5cc18\",\"moduleSequenceNumber\":276}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([['help', false]]);\\n    const hostname = args._[0];\\n    if(args.help || !hostname) {\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n            await ns.weaken(hostname);\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n            await ns.grow(hostname);\\n        } else {\\n            await ns.hack(hostname);\\n        }\\n    }\\n}\",\"filename\":\"/bitburner-scripts-master/basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"2f6df990f2d72047671b485857c0359683e14380024d1134638621c572466d8f\",\"moduleSequenceNumber\":277}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = ns.args[0];\\n    if (args.help || !server) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    const ram = ns.getServerRam(server);\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\",\"filename\":\"/bitburner-scripts-master/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitburner-scripts-master/analyze_server.js\",\"url\":\"blob:file:///00b4e893-99f9-4349-9f82-18005acf5f2b\"}],\"ramUsage\":5.35,\"server\":\"home\",\"_hash\":\"87103c060efdd68347d0731b5f6331004e8e06e15e1f343697f212023a2fd2c1\",\"moduleSequenceNumber\":278}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    \\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    while (true) {\\n        try {\\n            const headers = []\\n            const values = [];\\n            // Add script income per second\\n            headers.push(\\\"ScrInc\\\");\\n            values.push(ns.getScriptIncome()[0].toPrecision(5) + '/sec');\\n            // Add script exp gain rate per second\\n            headers.push(\\\"ScrExp\\\");\\n            values.push(ns.getScriptExpGain().toPrecision(5) + '/sec');\\n            // TODO: Add more neat stuff\\n\\n            // Now drop it into the placeholder elements\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        } catch (err) { // This might come in handy later\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"/bitburner-scripts-master/custom-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":26.8,\"server\":\"home\",\"_hash\":\"355088725a97bc9b6482e9f7aca9e68a611fb711ab745fd8f779c302466e8e43\",\"moduleSequenceNumber\":279}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help || args._.length < 2) {\\n\\t\\tns.tprint(\\\"This script deploys another script on a server with maximum threads possible.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} HOST SCRIPT ARGUMENTS`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles basic_hack.js foodnstuff`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst host = args._[0];\\n\\tconst script = args._[1];\\n\\tconst script_args = args._.slice(2);\\n\\n\\tif (!ns.serverExists(host)) {\\n\\t\\tns.tprint(`Server '${host}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\tif (!ns.ls(ns.getHostname()).find(f => f === script)) {\\n\\t\\tns.tprint(`Script '${script}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(script));\\n\\tns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\n\\tawait ns.scp(script, ns.getHostname(), host);\\n\\tns.exec(script, host, threads, ...script_args);\\n}\",\"filename\":\"/bitburner-scripts-master/deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.05,\"server\":\"home\",\"_hash\":\"306e804711c384f38cdc1c6ae9dfc049394484d5758f25a4b3af4db84fc4ef92\",\"moduleSequenceNumber\":280}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    let servers = list_servers(ns);\\n    const boughtServers = ns.getPurchasedServers(ns);\\n    servers = servers.filter(s => !boughtServers.includes(s));\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\n    if(!hostname) {\\n        ns.tprint(\\\"No coding contract found.\\\");\\n        return;\\n    }\\n\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\n}\",\"filename\":\"/bitburner-scripts-master/find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitburner-scripts-master/find_coding_contract.js\",\"url\":\"blob:file:///0005d250-7c55-4224-b644-0734a357019c\"}],\"ramUsage\":4.25,\"server\":\"home\",\"_hash\":\"60f71098e4f2ae9f5a01cd3b08d175affba09b8937787c8a148ca8c8d24cbe1c\",\"moduleSequenceNumber\":281}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child == target) {\\n            route.unshift(child);\\n            route.unshift(server);\\n            return true;\\n        }\\n\\n        if (recursiveScan(ns, server, child, target, route)) {\\n            route.unshift(server);\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    let route = [];\\n    let server = args._[0];\\n    if (!server || args.help) {\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n\\n    recursiveScan(ns, '', 'home', server, route);\\n    for (const i in route) {\\n        await ns.sleep(500);\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"/bitburner-scripts-master/find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitburner-scripts-master/find_server.js\",\"url\":\"blob:file:///d0913274-773c-4d40-9b88-931a588e8cdd\"}],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"96b133bf421500c251c35689632a3c28482dd3d295d9855513696b92672aae25\",\"moduleSequenceNumber\":282}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags._.length === 0 || flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    while (true) {\\n        const server = flags._[0];\\n        let money = ns.getServerMoneyAvailable(server);\\n        if (money === 0) money = 1;\\n        const maxMoney = ns.getServerMaxMoney(server);\\n        const minSec = ns.getServerMinSecurityLevel(server);\\n        const sec = ns.getServerSecurityLevel(server);\\n        ns.clearLog(server);\\n        ns.print(`${server}:`);\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)`);\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`);\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"/bitburner-scripts-master/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.15,\"server\":\"home\",\"_hash\":\"d6a46d28ed1cd91ed5432247f91640193ed3b15197aeded65255c05b287b7cba\",\"moduleSequenceNumber\":283}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as functions from \\\"./functions.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    functions.disableLog(ns);\\n\\n    while (true) {\\n        let ram = 8;\\n        const serverLimit = ns.getPurchasedServerLimit();\\n        const allowMaxCost = ns.getServerMoneyAvailable(\\\"home\\\") / serverLimit;\\n        const maxRam = ns.getPurchasedServerMaxRam();\\n        for (let checkRam = 8; checkRam <= maxRam; checkRam *= 2) {\\n            if (allowMaxCost > ns.getPurchasedServerCost(checkRam)) {\\n                ram = checkRam;\\n            }\\n        }\\n\\n        for (const hostname of ns.getPurchasedServers()) {\\n            if (ns.getServerMaxRam(hostname) < ram) {\\n                // less then target mem, delete\\n                ns.killall(hostname);\\n                ns.deleteServer(hostname);\\n            }\\n        }\\n\\n        const cost = ns.getPurchasedServerCost(ram);\\n        while (ns.getPurchasedServers().length < serverLimit) {\\n            // Check if we have enough money to purchase a server\\n            if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n                // If we have enough money\\n                ns.purchaseServer(\\\"pserv\\\", ram);\\n            } else {\\n                ns.print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + ns.getServerMoneyAvailable(\\\"home\\\"));\\n            }\\n            await ns.sleep(1000);\\n        }\\n\\n        await ns.sleep(10 * 60 * 1000);\\n    }\\n}\",\"filename\":\"purchase-server.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"functions.js\",\"url\":\"blob:file:///3b29d905-6c8d-43bf-9f8e-3c46b21d4b44\"},{\"filename\":\"purchase-server.ns\",\"url\":\"blob:file:///f3689c44-43b8-4e6c-9556-e8598c82ba02\"}],\"ramUsage\":15,\"server\":\"home\",\"_hash\":\"c6144651acd839bacb7e0ec4ba68f73dc91feca3aab5693452077ce600870ed7\",\"moduleSequenceNumber\":284}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as functions from \\\"./functions.js\\\";\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    functions.disableLog(ns);\\r\\n\\r\\n    const allServers = functions.listServers(ns);\\r\\n    allServers.unshift(\\\"home\\\");\\r\\n\\r\\n    const targetServers = functions.listServers(ns, {\\r\\n        hasRootAccess: true,\\r\\n        hasMoney: true,\\r\\n        highestProduction: 25,\\r\\n    });\\r\\n\\r\\n    for (const hostname of allServers) {\\r\\n        if (!ns.hasRootAccess(hostname)) {\\r\\n            await functions.hackServer(ns, hostname);\\r\\n        }\\r\\n        if (ns.hasRootAccess(hostname)) {\\r\\n            const saveRam = hostname == \\\"home\\\" ? 128 : 0;\\r\\n            await functions.setupHackScripts(ns, hostname, saveRam, ...targetServers);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"setup-server.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"functions.js\",\"url\":\"blob:file:///3b29d905-6c8d-43bf-9f8e-3c46b21d4b44\"},{\"filename\":\"setup-server.ns\",\"url\":\"blob:file:///d8dd5b94-7569-4fd5-9cf5-c52b3957c8f1\"}],\"ramUsage\":9.55,\"server\":\"home\",\"_hash\":\"909d041f1e32dea4d1e4541c5ed94dc4dce7decda267df9f4496b6dbf5840ee7\",\"moduleSequenceNumber\":15041}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst useMoneyPercent = 0.1;\\n\\t// Only buy nodes up to 23. Past that its not really worth it.\\n\\tconst maxNodes = 23;\\n\\n\\tfunction myMoney() {\\n\\t\\tconst money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tif (ns.hacknet.numNodes() <= 8) {\\n\\t\\t\\treturn money;\\n\\t\\t}\\n\\t\\t// TODO: 依照 hacking level 保留 money\\n\\t\\treturn money * useMoneyPercent;\\n\\t}\\n\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tconst actions = [\\n\\t\\t{\\n\\t\\t\\tcost: () => {\\n\\t\\t\\t\\tif (ns.hacknet.numNodes() >= maxNodes) {\\n\\t\\t\\t\\t\\treturn Infinity;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn ns.hacknet.getPurchaseNodeCost();\\n\\t\\t\\t},\\n\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\tconst res = ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tns.print(\\\"Purchased hacknet Node with index \\\" + res);\\n\\t\\t\\t\\tpushNodeActions(res);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t];\\n\\n\\t/**\\n\\t * @param {number} i\\n\\t */\\n\\tfunction pushNodeActions(i) {\\n\\t\\tactions.push(\\n\\t\\t\\t{\\n\\t\\t\\t\\tcost: () => ns.hacknet.getLevelUpgradeCost(i, 10),\\n\\t\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(i, 10);\\n\\t\\t\\t\\t\\tns.print(`[${i}] Upgrade hacknet node Level`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tcost: () => ns.hacknet.getRamUpgradeCost(i, 2),\\n\\t\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeRam(i, 2);\\n\\t\\t\\t\\t\\tns.print(`[${i}] Upgrade hacknet node Ram`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tcost: () => ns.hacknet.getCoreUpgradeCost(i, 1),\\n\\t\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCore(i, 1);\\n\\t\\t\\t\\t\\tns.print(`[${i}] Upgrade hacknet node Core`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t)\\n\\t}\\n\\n\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tpushNodeActions(i);\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tactions.sort((a, b) => a.cost() - b.cost());\\n\\n\\t\\tconst cost = actions[0].cost();\\n\\t\\tif (Number.isFinite(cost)) {\\n\\t\\t\\twhile (myMoney() < cost) {\\n\\t\\t\\t\\tns.print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t\\tactions[0].upgrade();\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buy-hacknet-2.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy-hacknet-2.ns\",\"url\":\"blob:file:///90ceeb83-f212-413e-ae19-6d2b51d0d4fc\"}],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"d3f362ae4b824a569501fd04f1f2f78f852e6fb6ae1013cc87eccc814820b46e\",\"moduleSequenceNumber\":286}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {NS} ns\\n **/\\nexport function disableLog(ns) {\\n    ns.disableLog(\\\"disableLog\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"getServerMaxMoney\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMaxRam\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"getScriptRam\\\");\\n    ns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} script\\n * @param {string} hostname\\n * @param {number} save\\n * @param {number} ratio\\n **/\\nexport function getCanRunThreads(ns, script, hostname, save = 0, ratio = 1) {\\n    const scriptRam = ns.getScriptRam(script, hostname);\\n    const serverRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname) - save;\\n    let numThreads = Math.floor(serverRam / scriptRam * ratio);\\n\\n    const serverAvailableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\n    if (numThreads < 1 && scriptRam < serverAvailableRam) return 1;\\n\\n    while (numThreads * scriptRam > serverAvailableRam) {\\n        numThreads--;\\n    }\\n    return numThreads;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} script\\n * @param {string} hostname\\n * @param {number} save\\n * @param {number} ratio\\n * @param {Array<string>} script_args\\n **/\\nexport async function copyAndRun(ns, script, hostname, save = 0, ratio = 1, ...script_args) {\\n    if (ns.scriptRunning(script, hostname) && !ns.isRunning(script, hostname, ...script_args)) {\\n        ns.scriptKill(script, hostname);\\n    }\\n    if (!ns.isRunning(script, hostname, ...script_args)) {\\n        if (hostname !== \\\"home\\\") {\\n            await ns.scp(script, \\\"home\\\", hostname);\\n        }\\n        const threads = getCanRunThreads(ns, script, hostname, save, ratio);\\n        if (threads > 0) {\\n            ns.exec(script, hostname, threads, ...script_args);\\n        }\\n    }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} hostname\\n * @param {number} save\\n * @param {Array<string>} targetServers\\n **/\\nexport async function setupHackScripts(ns, hostname, save = 0, ...targetServers) {\\n    const scripts = {\\n        \\\"/Summertime/hackloop.js\\\": 1,\\n        \\\"/Summertime/secloop.js\\\": 2,\\n        \\\"/Summertime/growloop.js\\\": 10,\\n    };\\n    const sumPart = Object.values(scripts).reduce((acc, cur) => acc + cur, 0);\\n\\n    if (ns.getServerMaxRam(hostname) < 8) {\\n        await copyAndRun(ns, \\\"early-hack-template.ns\\\", hostname, save, 1, ...targetServers);\\n        return;\\n    }\\n\\n    if (ns.scriptRunning(\\\"early-hack-template.ns\\\", hostname)) {\\n        ns.scriptKill(\\\"early-hack-template.ns\\\", hostname);\\n    }\\n    if (ns.scriptRunning(\\\"/Summertime/hackloop.js\\\", hostname) && !ns.isRunning(\\\"/Summertime/hackloop.js\\\", hostname, ...targetServers)) {\\n        for (const script of Object.keys(scripts)) {\\n            ns.scriptKill(script, hostname);\\n        }\\n    }\\n    if (targetServers.length > 0) {\\n        for (const script of Object.keys(scripts)) {\\n            await copyAndRun(ns, script, hostname, save - ns.getServerUsedRam(hostname), scripts[script] / sumPart, ...targetServers);\\n        }\\n    }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} hostname\\n **/\\nexport async function hackServer(ns, hostname) {\\n    if (ns.getServerRequiredHackingLevel(hostname) <= ns.getHackingLevel()) {\\n        let num = ns.getServerNumPortsRequired(hostname);\\n        if (num > 0 && ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            ns.brutessh(hostname);\\n            num--;\\n        }\\n        if (num > 0 && ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ns.ftpcrack(hostname);\\n            num--;\\n        }\\n        if (num > 0 && ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            ns.relaysmtp(hostname);\\n            num--;\\n        }\\n        if (num > 0 && ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            ns.httpworm(hostname);\\n            num--;\\n        }\\n        if (num > 0 && ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            ns.sqlinject(hostname);\\n            num--;\\n        }\\n        if (num <= 0) {\\n            ns.nuke(hostname);\\n            await installBackdoorOnServer(ns, hostname);\\n        }\\n    }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} hostname\\n **/\\nexport async function installBackdoorOnServer(ns, hostname) {\\n    const script = \\\"install-backdoor.ns\\\";\\n    if (ns.getPlayer().bitNodeN >= 4) {\\n        await ns.scp(script, \\\"home\\\", hostname);\\n        ns.exec(script, hostname);\\n    }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} parent\\n * @param {string} server\\n * @param {Array<string>} list\\n **/\\nexport function scanList(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n\\n        scanList(ns, server, child, list);\\n    }\\n}\\n\\n/**\\n * @typedef ServerFilter\\n * @type {object}\\n * @property {boolean=} withoutPurchasedServers\\n * @property {boolean=} hasRootAccess\\n * @property {boolean=} hasMoney\\n * @property {number=} highestProduction\\n */\\n\\n/**\\n * @param {NS} ns\\n * @param {ServerFilter} filter\\n **/\\nexport function listServers(ns, filter = {}) {\\n    /** @type {Array<string>} */\\n    let list = [];\\n    scanList(ns, '', 'home', list);\\n\\n    if (filter.withoutPurchasedServers) {\\n        const pserv = ns.getPurchasedServers();\\n        list = list.filter((hostname) => !pserv.includes(hostname));\\n    }\\n\\n    if (filter.hasRootAccess) {\\n        list = list.filter((hostname) => ns.hasRootAccess(hostname));\\n    }\\n\\n    if (filter.hasMoney) {\\n        list = list.filter((hostname) => ns.getServerMaxMoney(hostname) > 0);\\n    }\\n\\n    if (filter.highestProduction && filter.highestProduction > 0 && list.length > filter.highestProduction) {\\n        /** @type {[string, number][]} */\\n        const serverMoney = list.map((hostname) => [hostname, ns.getServerMaxMoney(hostname)]);\\n        const highestProduction = serverMoney\\n            .sort((a, b) => b[1] - a[1])\\n            .slice(0, filter.highestProduction)\\n            .map(a => a[0]);\\n        list = list.filter((hostname) => highestProduction.includes(hostname));\\n    }\\n\\n    return list;\\n}\\n\\n/**\\n * @template T\\n * @param {T[]} array\\n **/\\nexport function shuffleArray(array) {\\n    for (let i = array.length - 1; i > 0; i--) {\\n        const j = Math.floor(Math.random() * (i + 1));\\n        [array[i], array[j]] = [array[j], array[i]];\\n    }\\n    return array\\n}\\n\\n/**\\n * @template T\\n * @param {T[]} array\\n * @param {number} perChunk\\n **/\\nexport function chunkArray(array, perChunk) {\\n    /** @type {T[][]} */\\n    const resultArray = [];\\n    return array.reduce((resultArray, item, index) => {\\n        const chunkIndex = Math.floor(index / perChunk);\\n\\n        if (!resultArray[chunkIndex]) {\\n            resultArray[chunkIndex] = []; // start a new chunk\\n        }\\n\\n        resultArray[chunkIndex].push(item);\\n\\n        return resultArray;\\n    }, resultArray);\\n}\",\"filename\":\"functions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":9.55,\"server\":\"home\",\"_hash\":\"c73e434504028e2c78492c9b5ecf4d39f291e67f039567bca997c631ed547f97\",\"moduleSequenceNumber\":287}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const target = \\\"n00dles\\\";\\r\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n    ns.nuke(target);\\r\\n\\r\\n    await ns.hack(target);\\r\\n    await ns.weaken(target);\\r\\n    await ns.grow(target);\\r\\n    await ns.weaken(target);\\r\\n    await ns.hack(target);\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"n00dles.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"n00dles.ns\",\"url\":\"blob:file:///a00b8dbe-30f6-418d-90a2-d40bce20facc\"}],\"ramUsage\":2.45,\"server\":\"home\",\"_hash\":\"e9e03d970d1714a863ad1d6d9f05ee07e79f842791b86519b693c9f3e79be870\",\"moduleSequenceNumber\":288}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    await ns.installBackdoor();\\r\\n}\",\"filename\":\"install-backdoor.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":129.6,\"server\":\"home\",\"_hash\":\"be441fe28a3a9d6a52f92b1fa40400ea734c632df09af4f0546f3375f3cce74c\",\"moduleSequenceNumber\":290}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    if (!ns.getPlayer().tor) {\\r\\n        ns.purchaseTor();\\r\\n    }\\r\\n    if (ns.getPlayer().tor) {\\r\\n        const programs = [\\r\\n            \\\"BruteSSH.exe\\\",\\r\\n            \\\"AutoLink.exe\\\",\\r\\n            \\\"FTPCrack.exe\\\",\\r\\n            \\\"relaySMTP.exe\\\",\\r\\n            \\\"DeepscanV1.exe\\\",\\r\\n            \\\"DeepscanV2.exe\\\",\\r\\n            \\\"ServerProfiler.exe\\\",\\r\\n            \\\"HTTPWorm.exe\\\",\\r\\n            \\\"SQLInject.exe\\\",\\r\\n            \\\"Formulas.exe\\\",\\r\\n        ];\\r\\n        for (const program of programs) {\\r\\n            if (!ns.fileExists(program, \\\"home\\\")) {\\r\\n                ns.purchaseProgram(program);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"purchase-tor.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":258.2,\"server\":\"home\",\"_hash\":\"0c6a884698c66ae1187765dd5e56a911a7ad22be48950b1393c5e6c5740eea0f\",\"moduleSequenceNumber\":291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as functions from \\\"./functions.js\\\";\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    functions.disableLog(ns);\\r\\n\\r\\n    const servers = functions.listServers(ns, {\\r\\n        withoutPurchasedServers: true,\\r\\n        hasRootAccess: true,\\r\\n    }).sort((a, b) => {\\r\\n        return ns.getServerRequiredHackingLevel(a) - ns.getServerRequiredHackingLevel(b);\\r\\n    });\\r\\n    const maxServerNameLength = Math.max(...servers.map(s => s.length));\\r\\n\\r\\n    for (const server of servers) {\\r\\n        const hackingLevel = ns.getServerRequiredHackingLevel(server);\\r\\n        const ram = ns.getServerMaxRam(server);\\r\\n        const money = ns.getServerMoneyAvailable(server);\\r\\n        const maxMoney = ns.getServerMaxMoney(server);\\r\\n        let str = `[${server.padEnd(maxServerNameLength)}] Hack: ${`${hackingLevel}`.padStart(4)}`;\\r\\n        if (ram > 0) {\\r\\n            str += `, RAM: ${`${ram}`.padStart(4)}GB`;\\r\\n        } else {\\r\\n            str += `, RAM:    ---`;\\r\\n        }\\r\\n        if (maxMoney > 0) {\\r\\n            str += `, Max Money: ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)`;\\r\\n        }\\r\\n        ns.tprint(str);\\r\\n    }\\r\\n}\",\"filename\":\"list-servers.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"functions.js\",\"url\":\"blob:file:///d9e4af80-851e-4214-9dfe-1800218e8140\"},{\"filename\":\"list-servers.ns\",\"url\":\"blob:file:///9614d433-29d8-4375-9bc2-82cb45e115a4\"}],\"ramUsage\":9.65,\"server\":\"home\",\"_hash\":\"44be6375e3dfda7f7fcf731b5e8c641f144ba06f71b8e23f827bd87b1c468cf8\",\"moduleSequenceNumber\":18380}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\n    /*\\n    ns.hacknet-auto.script for Bitburner v0.47.2\\n    Winners don't use copyright\\n    \\n    Latest version of this script should be at\\n        https://github.com/iuriguilherme/netscripts.d\\n    Bitburner should be at https://github.com/danielyxie/bitburner\\n    \\n    This script requires 5.70 GB of RAM to run for 1 thread(s)\\n    \\n    This script will buy a ns.hacknet Node, fully upgrade it and then buy the next\\n    one in an infinite loop. If the cost of the next upgrade is higher than \\n    buying a new ns.hacknet Node, then a new one will be bought before the last one\\n    is upgraded. There is an option to set the budget limit.\\n*/\\n\\n    // We will not buy anything if there's less money than this ammount\\n    var reserveMoney = 25000000;\\n    // Number of times to upgrade (shouldn't have to change this)\\n    var n = 1;\\n\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n\\n    // Buy first ns.hacknetNode if there are none\\n    if (\\n        ns.hacknet.numNodes() === 0 &&\\n        ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney\\n    ) {\\n        ns.hacknet.purchaseNode();\\n        ns.print(\\n            \\\"Purchased \\\" +\\n            ns.hacknet.getNodeStats((ns.hacknet.numNodes() - 1)).name +\\n            \\\" because there was none.\\\"\\n        );\\n    }\\n\\n    // If there are no ns.hacknet Nodes, we can't do anything, so the script ends.\\n    while (ns.hacknet.numNodes() > 0) {\\n        // If there is not enough money, we wait for it instead of ending the loop.\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney) {\\n            for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n                while (\\n                    ns.hacknet.getLevelUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeLevel(i, n)\\n                ) {\\n                    ns.print(\\n                        \\\"Upgraded \\\" +\\n                        ns.hacknet.getNodeStats(i).name +\\n                        \\\" to level \\\" +\\n                        ns.hacknet.getNodeStats(i).level\\n                    );\\n                    await ns.sleep(100);\\n                }\\n                while (\\n                    ns.hacknet.getRamUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeRam(i, n)\\n                ) {\\n                    ns.print(\\n                        \\\"Upgraded \\\" +\\n                        ns.hacknet.getNodeStats(i).name +\\n                        \\\" RAM to \\\" +\\n                        ns.hacknet.getNodeStats(i).ram\\n                    );\\n                    await ns.sleep(100);\\n                }\\n                while (\\n                    ns.hacknet.getCoreUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeCore(i, n)\\n                ) {\\n                    ns.print(\\n                        \\\"Upgraded \\\" +\\n                        ns.hacknet.getNodeStats(i).name +\\n                        \\\" core to \\\" +\\n                        ns.hacknet.getNodeStats(i).cores\\n                    );\\n                    await ns.sleep(100);\\n                }\\n            } // END for (i = 0; i < ns.hacknet.numNodes(); i++)\\n            /*\\n                Buy next ns.hacknet Node if the last one is already fully upgraded.\\n                If for some reason the last ns.hacknet Node is fully upgraded and the\\n                others don't, the loop above will still attempt to upgrade them all.\\n            */\\n            if (\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity\\n            ) {\\n                // Only buy nodes up to 23. Past that its not really worth it.\\n                if (ns.hacknet.numNodes() < 23) {\\n                    ns.hacknet.purchaseNode();\\n\\n                    ns.print(\\n                        \\\"Purchased \\\" +\\n                        ns.hacknet.getNodeStats((ns.hacknet.numNodes() - 1)).name +\\n                        \\\" because the last one couldn't be upgraded further.\\\"\\n                    );\\n                }\\n            } else if (\\n                /*\\n                Or buy the next ns.hacknet Node if the next upgrade is more expensive\\n                than buying a new ns.hacknet Node.\\n                */\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost()\\n            ) {\\n                ns.hacknet.purchaseNode();\\n                ns.print(\\n                    \\\"Purchased \\\" +\\n                    ns.hacknet.getNodeStats((ns.hacknet.numNodes() - 1)).name +\\n                    \\\" because it was cheaper than next upgrade for the last one.\\\"\\n                );\\n            }\\n            await ns.sleep(100);\\n        }\\n        await ns.sleep(100);\\n    }\\n};\",\"filename\":\"/quonic/hacknet-auto.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/quonic/hacknet-auto.js\",\"url\":\"blob:file:///85e7e922-9325-4171-b680-8ca7b6067c22\"}],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"d8075d156141f93752075b76d53f3ceedb5d0b62492d0ac9f9a549958744f5fe\",\"moduleSequenceNumber\":293}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function allhosts(ns) {\\n\\tlet hosts = ['home'];\\n\\tfor (const host of hosts)\\n\\t\\tfor (const newhost of ns.scan(host))\\n\\t\\t\\tif (!hosts.includes(newhost))\\n\\t\\t\\t\\thosts.push(newhost)\\n\\treturn hosts\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst player = ns.getPlayer()\\n\\tconst targets = allhosts(ns)\\n\\t\\t.slice(1)\\n\\t\\t.map(h => ns.getServer(h))\\n\\t\\t.filter(s => s.hasAdminRights)\\n\\t\\t.filter(s => s.requiredHackingSkill <= player.hacking)\\n\\tns.scriptKill('growloop.js', 'home')\\n\\tns.scriptKill('secloop.js', 'home')\\n\\tlet X = 0\\n\\twhile (X++ < 8) {\\n\\t\\tns.exec('growloop.js', 'home', 4, '--name', X, ...targets.map(h => h.hostname))\\n\\t\\tns.exec('secloop.js', 'home', 4, '--name', X, ...targets.map(h => h.hostname))\\n\\t}\\n}\",\"filename\":\"/Summertime/init.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.6,\"server\":\"home\",\"_hash\":\"1b0811b8424574373aa62582b005828cc6fa976868400c7375d46d6c344d6562\",\"moduleSequenceNumber\":294}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///3d69c414-d8da-4a78-8336-a9654d17e963\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":295}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function allhosts(ns) {\\n\\tlet hosts = ['home'];\\n\\tfor (const host of hosts)\\n\\t\\tfor (const newhost of ns.scan(host))\\n\\t\\t\\tif (!hosts.includes(newhost))\\n\\t\\t\\t\\thosts.push(newhost)\\n\\treturn hosts\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst player = ns.getPlayer()\\n\\tconst hosts = allhosts(ns)\\n\\tfor (const host of hosts) {\\n\\t\\tns.scriptKill('hackloop.js', host)\\n\\t}\\n\\tconst servers = hosts.map(h => ns.getServer(h))\\n\\n\\n\\tconst sources = servers.slice(1).filter(s => s.hasAdminRights)\\n\\tconst targets = sources.filter(s => s.requiredHackingSkill <= player.hacking)\\n\\n\\tfor (const source of sources) {\\n\\t\\tawait ns.scp('hackloop.js', 'home', source.hostname)\\n\\t\\tconst freeRam = source.maxRam - source.ramUsed;\\n\\t\\tconst neededRam = ns.getScriptRam('hackloop.js', source.hostname)\\n\\t\\tconst threads = Math.floor(freeRam / neededRam)\\n\\t\\tif (threads > 0)\\n\\t\\t\\tns.exec('hackloop.js', source.hostname, threads, ...targets.map(s => s.hostname))\\n\\t}\\n}\",\"filename\":\"/Summertime/occupy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.3,\"server\":\"home\",\"_hash\":\"34d115d139f6f2556226906b9f9c34b0705febba00ce88622fe75d1320d43f97\",\"moduleSequenceNumber\":296}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function allhosts(ns) {\\n\\tlet hosts = ['home'];\\n\\tfor (const host of hosts)\\n\\t\\tfor (const newhost of ns.scan(host))\\n\\t\\t\\tif (!hosts.includes(newhost))\\n\\t\\t\\t\\thosts.push(newhost)\\n\\treturn hosts\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst openers = {\\n\\t\\tftp: ns.fileExists('FTPCrack.exe', 'home'),\\n\\t\\thttp: ns.fileExists('HTTPWorm.exe', 'home'),\\n\\t\\tsmtp: ns.fileExists('relaySMTP.exe', 'home'),\\n\\t\\tsql: ns.fileExists('SQLInject.exe', 'home'),\\n\\t\\tssh: ns.fileExists('BruteSSH.exe', 'home'),\\n\\t}\\n\\tconst numOpenPorts = Object.values(openers).reduce((a, b) => a + b)\\n\\tconst rootable = allhosts(ns)\\n\\t\\t.slice(1)\\n\\t\\t.map(h => ns.getServer(h))\\n\\t\\t.filter(s => !s.hasAdminRights)\\n\\t\\t.filter(s => s.numOpenPortsRequired <= numOpenPorts)\\n\\n\\tfor (const server of rootable) {\\n\\t\\tif (openers.ftp)\\n\\t\\t\\tns.ftpcrack(server.hostname)\\n\\t\\tif (openers.http)\\n\\t\\t\\tns.httpworm(server.hostname)\\n\\t\\tif (openers.smtp)\\n\\t\\t\\tns.relaysmtp(server.hostname)\\n\\t\\tif (openers.sql)\\n\\t\\t\\tns.sqlinject(server.hostname)\\n\\t\\tif (openers.ssh)\\n\\t\\t\\tns.brutessh(server.hostname)\\n\\t\\tns.nuke(server.hostname)\\n\\t}\\n}\",\"filename\":\"/Summertime/rootall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.2,\"server\":\"home\",\"_hash\":\"ee82bf4971bd7820e88135958e2b6577d139cd6e8fd3d71b9423b4f06f50db95\",\"moduleSequenceNumber\":297}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///19aa0d80-cf83-4dde-afe1-2b51299672c6\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":298}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child == target) {\\n            route.unshift(child);\\n            route.unshift(server);\\n            return true;\\n        }\\n\\n        if (recursiveScan(ns, server, child, target, route)) {\\n            route.unshift(server);\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    let route = [];\\n    let server = args._[0];\\n    if (!server || args.help) {\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n\\n    recursiveScan(ns, '', 'home', server, route);\\n    for (let i = 0; i < route.length; i++) {\\n        // await ns.sleep(500);\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}${ns.hasRootAccess(route[i]) ? \\\" (rooted)\\\" : \\\"\\\"}`);\\n    }\\n    ns.tprint(route.map(serv => serv == \\\"home\\\" ? \\\"home;\\\" : `connect ${serv};`).join(\\\" \\\"));\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"find_server.js\",\"url\":\"blob:file:///71dcbc1f-652e-4f19-b0c5-76de36b7537b\"}],\"ramUsage\":1.85,\"server\":\"home\",\"_hash\":\"6788ee301fdfaa9c91223e6254e85a28b97d3b6cb50c4c2dd4184110ee51a047\",\"moduleSequenceNumber\":299}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///dc4eaa2c-247f-4d32-80cb-6ec017f9b0ab\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":300}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Stock market bot for bitburner, written by steamid/Meng- https://danielyxie.github.io/bitburner/ - [github.io] \\r\\n// Runs infinitely - buys and sells stock, hopefully for a profit...\\r\\n// version 1.21 - Added check for max stocks, cleaned things up a bit, cycle complete prints less frequently\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.print(\\\"Starting script here\\\");\\r\\n    ns.disableLog('sleep');\\r\\n    ns.disableLog('getServerMoneyAvailable');\\r\\n\\r\\n    let stockSymbols = ns.stock.getSymbols(); // all symbols\\r\\n    let portfolio = []; // init portfolio\\r\\n    let cycle = 0;\\r\\n    // ~~~~~~~You can edit these~~~~~~~~\\r\\n    const forecastThresh = 0.65; // Buy above this confidence level (forecast%)\\r\\n    const minimumCash = 50000000; // Minimum cash to keep\\r\\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n    ns.print(\\\"Starting run - Do we own any stocks?\\\"); //Finds and adds any stocks we already own\\r\\n    for (const stock of stockSymbols) {\\r\\n        let pos = ns.stock.getPosition(stock);\\r\\n        if (pos[0] > 0) {\\r\\n            portfolio.push({ sym: stock, value: pos[1], shares: pos[0] })\\r\\n            ns.print('Detected: ' + stock + ' quant: ' + pos[0] + ' @ ' + pos[1]);\\r\\n        };\\r\\n    };\\r\\n\\r\\n    while (true) {\\r\\n        for (const stock of stockSymbols) { // for each stock symbol\\r\\n            if (portfolio.findIndex(obj => obj.sym === stock) !== -1) { //if we already have this stock\\r\\n                let i = portfolio.findIndex(obj => obj.sym === stock); // log index of symbol as i\\r\\n                if (ns.stock.getAskPrice(stock) >= portfolio[i].value * 1.1) { // if the price is higher than what we bought it at +10% then we SELL\\r\\n                    sellStock(stock);\\r\\n                }\\r\\n                else if (ns.stock.getForecast(stock) < 0.4) {\\r\\n                    sellStock(stock);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            else if (ns.stock.getForecast(stock) >= forecastThresh) { // if the forecast is better than threshold and we don't own then BUY\\r\\n                buyStock(stock);\\r\\n            }\\r\\n        } // end of for loop (iterating stockSymbols)\\r\\n        cycle++;\\r\\n        if (cycle % 5 === 0) { ns.print('Cycle ' + cycle + ' Complete') };\\r\\n        await ns.sleep(6000);\\r\\n    } // end of while true loop\\r\\n\\r\\n    function buyStock(stock) {\\r\\n        let stockPrice = ns.stock.getAskPrice(stock); // Get the stockprice\\r\\n        let shares = stockBuyQuantCalc(stockPrice, stock); // calculate the shares to buy using StockBuyQuantCalc\\r\\n\\r\\n        if (ns.stock.getVolatility(stock) <= 0.05) { // if volatility is < 5%, buy the stock\\r\\n            ns.stock.buy(stock, shares);\\r\\n            ns.print('Bought: ' + stock + ' quant: ' + Math.round(shares) + ' @ ' + Math.round(stockPrice));\\r\\n\\r\\n            portfolio.push({ sym: stock, value: stockPrice, shares: shares }); //store the purchase info in portfolio\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sellStock(stock) {\\r\\n        let position = ns.stock.getPosition(stock);\\r\\n        var forecast = ns.stock.getForecast(stock);\\r\\n        if (forecast < 0.55) {\\r\\n            let i = portfolio.findIndex(obj => obj.sym === stock); //Find the stock info in the portfolio\\r\\n            ns.print('SOLD: ' + stock + 'quant: ' + portfolio[i].shares + '@ ' + portfolio[i].value);\\r\\n            portfolio.splice(i, 1); // Remove the stock from portfolio\\r\\n            ns.stock.sell(stock, position[0]);\\r\\n\\r\\n        }\\r\\n    };\\r\\n\\r\\n    function stockBuyQuantCalc(stockPrice, stock) { // Calculates how many shares to buy\\r\\n        let playerMoney = ns.getServerMoneyAvailable('home') - minimumCash;\\r\\n        let maxSpend = playerMoney * 0.25;\\r\\n        let calcShares = maxSpend / stockPrice;\\r\\n        let maxShares = ns.stock.getMaxShares(stock);\\r\\n\\r\\n        if (calcShares > maxShares) {\\r\\n            return maxShares\\r\\n        }\\r\\n        else { return calcShares }\\r\\n    }\\r\\n}\",\"filename\":\"/steamsplay.com/stockbot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":19.7,\"server\":\"home\",\"_hash\":\"572fbe622d14ffface45656b43753c35aecb4d6abfcf1b183ecf6c88ee0d2630\",\"moduleSequenceNumber\":301}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Stock market bot for bitburner, written by steamid/Meng- https://danielyxie.github.io/bitburner/ - [github.io]\\r\\n// Runs infinitely - buys and sells stock, hopefully for a profit...\\r\\n// version 1.21 - Added check for max stocks, cleaned things up a bit, cycle complete prints less frequently\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    ns.print(\\\"Starting script here\\\");\\r\\n    ns.disableLog('sleep');\\r\\n    ns.disableLog('getServerMoneyAvailable');\\r\\n\\r\\n    let stockSymbols = ns.stock.getSymbols(); // all symbols\\r\\n    let portfolio = []; // init portfolio\\r\\n    let cycle = 0;\\r\\n    // ~~~~~~~You can edit these~~~~~~~~\\r\\n    const forecastThresh = 0.65; // Buy above this confidence level (forecast%)\\r\\n    const minimumCash = 50000000; // Minimum cash to keep\\r\\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n    ns.print(\\\"Starting run - Do we own any stocks?\\\"); //Finds and adds any stocks we already own\\r\\n    for (const stock of stockSymbols) {\\r\\n        let pos = ns.stock.getPosition(stock);\\r\\n        if (pos[0] > 0) {\\r\\n            portfolio.push({ sym: stock, value: pos[1], shares: pos[0] })\\r\\n            ns.print('Detected: ' + stock + ' quant: ' + pos[0] + ' @ ' + pos[1]);\\r\\n        };\\r\\n    };\\r\\n\\r\\n    while (true) {\\r\\n        for (const stock of stockSymbols) { // for each stock symbol\\r\\n            if (portfolio.findIndex(obj => obj.sym === stock) !== -1) { //if we already have this stock\\r\\n                let i = portfolio.findIndex(obj => obj.sym === stock); // log index of symbol as i\\r\\n                if (ns.stock.getAskPrice(stock) >= portfolio[i].value * 1.1) { // if the price is higher than what we bought it at +10% then we SELL\\r\\n                    sellStock(stock);\\r\\n                }\\r\\n                else if (ns.stock.getForecast(stock) < 0.4) {\\r\\n                    sellStock(stock);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            else if (ns.stock.getForecast(stock) >= forecastThresh) { // if the forecast is better than threshold and we don't own then BUY\\r\\n                buyStock(stock);\\r\\n            }\\r\\n        } // end of for loop (iterating stockSymbols)\\r\\n        cycle++;\\r\\n        if (cycle % 5 === 0) { ns.print('Cycle ' + cycle + ' Complete') };\\r\\n        await ns.sleep(6000);\\r\\n    } // end of while true loop\\r\\n\\r\\n    function buyStock(stock) {\\r\\n        let stockPrice = ns.stock.getAskPrice(stock); // Get the stockprice\\r\\n        let shares = stockBuyQuantCalc(stockPrice, stock); // calculate the shares to buy using StockBuyQuantCalc\\r\\n\\r\\n        if (ns.stock.getVolatility(stock) <= 0.05) { // if volatility is < 5%, buy the stock\\r\\n            ns.stock.buy(stock, shares);\\r\\n            ns.print('Bought: ' + stock + ' quant: ' + Math.round(shares) + ' @ ' + Math.round(stockPrice));\\r\\n\\r\\n            portfolio.push({ sym: stock, value: stockPrice, shares: shares }); //store the purchase info in portfolio\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sellStock(stock) {\\r\\n        let position = ns.stock.getPosition(stock);\\r\\n        var forecast = ns.stock.getForecast(stock);\\r\\n        if (forecast < 0.55) {\\r\\n            let i = portfolio.findIndex(obj => obj.sym === stock); //Find the stock info in the portfolio\\r\\n            ns.print('SOLD: ' + stock + 'quant: ' + portfolio[i].shares + '@ ' + portfolio[i].value);\\r\\n            portfolio.splice(i, 1); // Remove the stock from portfolio\\r\\n            ns.stock.sell(stock, position[0]);\\r\\n\\r\\n        }\\r\\n    };\\r\\n\\r\\n    function stockBuyQuantCalc(stockPrice, stock) { // Calculates how many shares to buy\\r\\n        let playerMoney = ns.getServerMoneyAvailable('home') - minimumCash;\\r\\n        let maxSpend = playerMoney * 0.25;\\r\\n        let calcShares = maxSpend / stockPrice;\\r\\n        let maxShares = ns.stock.getMaxShares(stock);\\r\\n\\r\\n        if (calcShares > maxShares) {\\r\\n            return maxShares\\r\\n        }\\r\\n        else { return calcShares }\\r\\n    }\\r\\n}\",\"filename\":\"/steamsplay/stockbot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/steamsplay/stockbot.js\",\"url\":\"blob:file:///306b7dde-fe6d-4c77-8653-a15565bd86a1\"}],\"ramUsage\":19.7,\"server\":\"home\",\"_hash\":\"680a7b2826a5ea548728aa5593ee48d1624cda878215b35322bffc7a3207bbc0\",\"moduleSequenceNumber\":302}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns**/\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"ALL\\\"); //Visual clarity\\r\\n\\r\\n    //Welcome to the Auto Farm part 2: Electric Boogaloo\\r\\n    //This script is a little more complicated to explain easily, it dedicates high RAM servers to attack high profit servers\\r\\n    //This is also set and forget, your EXEs and hacking level are reacquired each second, so new servers are added without needing to reboot it\\r\\n    //Well I hope this brings you ideas, knowledge and or profits :D\\r\\n\\r\\n    var files = [\\\"weak.script\\\", \\\"grow.script\\\", \\\"hack.script\\\"];//No touching, unless you understand everything here\\r\\n    await ns.write(files[0], \\\"weaken(args)\\\", \\\"w\\\"); await ns.write(files[1], \\\"grow(args)\\\", \\\"w\\\"); await ns.write(files[2], \\\"hack(args)\\\", \\\"w\\\");\\r\\n\\r\\n    var serverList; var targetList; var hostList; var exes; var temp; var manager = false;\\r\\n    var cycle = [0, \\\"─\\\", \\\"\\\\\\\\\\\", \\\"|\\\", \\\"/\\\"]; var latest = [[\\\"-\\\", \\\"-\\\"], [\\\"-\\\", \\\"-\\\"], [\\\"-\\\", \\\"-\\\"]];\\r\\n    if (false) { brutessh(); ftpcrack(); relaysmtp(); httpworm(); sqlinject() } //Avoid RAM cost bypass error\\r\\n\\r\\n    var pServers = true;//await ns.prompt(\\\"Use player servers as hosts?\\\");\\r\\n\\r\\n    async function scanExes() {\\r\\n        exes = [\\\"BruteSSH\\\", \\\"FTPCrack\\\", \\\"relaySMTP\\\", \\\"SQLInject\\\", \\\"HTTPWorm\\\"];\\r\\n        for (let i = 0; i <= exes.length - 1; i++) { if (!ns.fileExists(exes[i] + \\\".exe\\\")) { exes.splice(i, 1); i-- } }//Removes EXEs you don't have\\r\\n    }\\r\\n\\r\\n    function arraySort(array) { return array.sort(function (a, b) { return b[0] - a[0] }) }//Sorts nested arrays\\r\\n    function logBalance(server) {//For balance in display\\r\\n        return [ns.nFormat(ns.getServerMoneyAvailable(server), '0a')] + \\\" / \\\" + [ns.nFormat(ns.getServerMaxMoney(server), '0a')]\\r\\n            + \\\" : \\\" + ns.nFormat(ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server), '0%')\\r\\n    }\\r\\n\\r\\n    async function log() {//The display\\r\\n        if (cycle[0] >= 4) { cycle[0] = 0 }; cycle[0]++;//Speen\\r\\n        ns.clearLog();\\r\\n        ns.print(\\\"╔═══╦═╣ HOST ╠════════════════╣ TARGET ╠═╗\\\");\\r\\n        ns.print(\\\"║ G ║ \\\" + latest[0][0] + latest[0][1].padStart(34 - latest[0][0].length) + \\\" ║\\\")\\r\\n        ns.print(\\\"║ W ║ \\\" + latest[1][0] + latest[1][1].padStart(34 - latest[1][0].length) + \\\" ║\\\")\\r\\n        ns.print(\\\"║ H ║ \\\" + latest[2][0] + latest[2][1].padStart(34 - latest[2][0].length) + \\\" ║\\\")\\r\\n        ns.print(\\\"║ \\\" + cycle[cycle[0]] + \\\" ╠════════════════════════════════════╣\\\")\\r\\n        if (targetList.length < 6) { ns.print(\\\"╚═══╝ ║\\\") } else {\\r\\n            ns.print(\\\"╠═══╝ Priority Servers Balance           ║\\\")\\r\\n            for (let i = 0; i < 6; i++) {\\r\\n                temp = targetList[i][1];\\r\\n                ns.print(\\\"║ > \\\" + temp + logBalance(temp).padStart(36 - temp.length) + \\\" ║\\\")\\r\\n            }\\r\\n            ns.print(\\\"╠════════════════════════════════════════╝\\\")\\r\\n            ns.print(\\\"║ EXE \\\" + exes.length + \\\"/5 ║ HOSTS \\\" + hostList.length + \\\" ║ TARGETS \\\" + targetList.length)\\r\\n            ns.print(\\\"╠════════════════════════════════════════╗\\\")\\r\\n            if (manager) {\\r\\n                ns.print(\\\"╠══════╣ Managing \\\" + ns.hacknet.numNodes() + \\\" HNet Nodes ╠\\\".padEnd(21, \\\"═\\\") + \\\"╣\\\")\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async function scanServers() {//Finds all servers\\r\\n        serverList = ns.scan(\\\"home\\\"); let serverCount = [serverList.length, 0]; let depth = 0; let checked = 0; let scanIndex = 0;\\r\\n        while (scanIndex <= serverCount[depth] - 1) {\\r\\n            let results = ns.scan(serverList[checked]); checked++;\\r\\n            for (let i = 0; i <= results.length - 1; i++) {\\r\\n                if (results[i] != \\\"home\\\" && !serverList.includes(results[i])) {\\r\\n                    serverList.push(results[i]); serverCount[depth + 1]++\\r\\n                }\\r\\n            }\\r\\n            if (scanIndex == serverCount[depth] - 1) { scanIndex = 0; depth++; serverCount.push(0) } else { scanIndex++ };\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async function checkServers() {//Sorts servers into lists based on RAM and money/hack time ratio: hostList and targetList\\r\\n        targetList = []; hostList = [[ns.getServerMaxRam(\\\"home\\\"), \\\"home\\\"]];\\r\\n        if (pServers) {//Adds in player servers\\r\\n            temp = ns.getPurchasedServers();\\r\\n            for (let i = 0; i < temp.length; i++) {\\r\\n                hostList.push([ns.getServerMaxRam(temp[i]), temp[i]])\\r\\n                await ns.scp(files, \\\"home\\\", temp[i]);\\r\\n            }\\r\\n        }\\r\\n        for (let i = 0; i <= serverList.length - 1; i++) {\\r\\n            let cTarget = serverList[i];\\r\\n            if (ns.getServerMoneyAvailable(cTarget) > 0 || ns.getServerMaxRam(cTarget) > 2) {//Filters out servers like darkweb\\r\\n                if (ns.getServerNumPortsRequired(cTarget) <= exes.length) {\\r\\n                    for (let i = 0; i <= exes.length - 1; i++) { ns[exes[i].toLowerCase()](cTarget) }//Runs all EXEs you have\\r\\n                    ns.nuke(cTarget);//Ghandi.jpeg\\r\\n                    temp = [Math.floor(ns.getServerMaxMoney(cTarget) / ns.getServerMinSecurityLevel(cTarget)), cTarget];\\r\\n                    if (ns.getServerMoneyAvailable(cTarget) != 0 && !targetList.includes(temp) && ns.getServerRequiredHackingLevel(cTarget) <= ns.getHackingLevel()) {\\r\\n                        targetList.push(temp); targetList = arraySort(targetList);\\r\\n                    }\\r\\n                    temp = [ns.getServerMaxRam(cTarget), cTarget];\\r\\n                    if (ns.getServerMaxRam(cTarget) > 2 && !hostList.includes(cTarget)) {\\r\\n                        hostList.push(temp); hostList = arraySort(hostList)\\r\\n                    }\\r\\n                    await ns.scp(files, \\\"home\\\", cTarget);\\r\\n                }\\r\\n            }\\r\\n            await ns.asleep(20);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    async function hackAll() {//Dedicates high RAM servers to attack high profit per second servers\\r\\n        let tarIndex = 0; let loop = false;\\r\\n        for (let i = 0; i <= hostList.length - 1; i++) {\\r\\n            if (tarIndex > targetList.length - 1) { tarIndex = 0; loop = true };\\r\\n            let hHost = hostList[i][1]; let hTarget = targetList[tarIndex][1]; let freeRam;\\r\\n            if (hHost == \\\"home\\\") { freeRam = Math.max(ns.getServerMaxRam(hHost) - ns.getServerUsedRam(hHost) - 50, 0) } else {\\r\\n                freeRam = ns.getServerMaxRam(hHost) - ns.getServerUsedRam(hHost)\\r\\n            }\\r\\n            if (freeRam >= 4) {\\r\\n                let threads = Math.floor(freeRam / 1.75); let bThreads = 0;\\r\\n                if (ns.getServerMoneyAvailable(hTarget) < ns.getServerMaxMoney(hTarget) * .70 || loop) {//Server money target here\\r\\n                    latest[0][0] = hHost; latest[0][1] = hTarget;\\r\\n                    if (threads > 2) {\\r\\n                        ns.exec(\\\"weak.script\\\", hHost, Math.ceil(0.08 * threads), hTarget);\\r\\n                        ns.exec(\\\"grow.script\\\", hHost, Math.floor(0.92 * threads), hTarget);\\r\\n                    } else { ns.exec(\\\"grow.script\\\", hHost, threads, hTarget) }\\r\\n                } else if (ns.getServerSecurityLevel(hTarget) > ns.getServerMinSecurityLevel(hTarget) + 5) {//Security target here\\r\\n                    latest[1][0] = hHost; latest[1][1] = hTarget;\\r\\n                    ns.exec(\\\"weak.script\\\", hHost, threads, hTarget);\\r\\n                } else {\\r\\n                    while (parseFloat(ns.hackAnalyze(hTarget)) * threads > .4) { threads--; bThreads++ }//Hack limit here\\r\\n                    latest[2][0] = hHost; latest[2][1] = hTarget;\\r\\n                    ns.exec(\\\"hack.script\\\", hHost, threads, hTarget);\\r\\n                    if (bThreads > 0) { ns.exec(\\\"weak.script\\\", hHost, bThreads, hTarget) }\\r\\n                }\\r\\n            }\\r\\n            tarIndex++;\\r\\n            await ns.asleep(20);\\r\\n        }\\r\\n    }\\r\\n    //Put modules below here\\r\\n    // manager = await ns.prompt(\\\"Activate Hacknet Manager?\\\");\\r\\n    // async function hnManager() {\\r\\n    //     let mode = [\\\"Level\\\", \\\"Ram\\\", \\\"Core\\\"]\\r\\n    //     function check(q) { return eval(q < ns.getPlayer().money / 5) }\\r\\n    //     if (check(ns.hacknet.getPurchaseNodeCost())) {\\r\\n    //         ns.hacknet.purchaseNode();\\r\\n    //     }\\r\\n    //     for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\r\\n    //         for (let n = 0; n < 3; n++) {\\r\\n    //             if (check(ns.hacknet[\\\"get\\\" + mode[n] + \\\"UpgradeCost\\\"](i))) {\\r\\n    //                 ns.hacknet[\\\"upgrade\\\" + mode[n]](i);\\r\\n    //             }\\r\\n    //         }\\r\\n    //     }\\r\\n    // }\\r\\n    //But above here\\r\\n    ns.tail()\\r\\n    while (true) {//Keeps everything running once per second\\r\\n        await scanExes()\\r\\n        await scanServers()\\r\\n        await checkServers()\\r\\n        await hackAll()\\r\\n        if (manager) { await hnManager() }\\r\\n        await log()\\r\\n        await ns.asleep(1000)\\r\\n    }\\r\\n}\",\"filename\":\"/steamsplay/auto_farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/steamsplay/auto_farm.js\",\"url\":\"blob:file:///d1a61569-a526-4379-9058-b5b49d0c0140\"}],\"ramUsage\":12.1,\"server\":\"home\",\"_hash\":\"ef0b160d2f3124c31f733504108a0b83de54d3e2f026f506030efe4128031a88\",\"moduleSequenceNumber\":12254}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":6682}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":6683}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":6684}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as functions from \\\"./functions.js\\\";\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    functions.disableLog(ns);\\r\\n\\r\\n    while (true) {\\r\\n        // if (!ns.scriptRunning(\\\"n00dles.ns\\\", \\\"home\\\")) {\\r\\n        //     ns.exec(\\\"n00dles.ns\\\", \\\"home\\\");\\r\\n        // }\\r\\n        if (!ns.scriptRunning(\\\"buy-hacknet-2.ns\\\", \\\"home\\\")) {\\r\\n            ns.exec(\\\"buy-hacknet-2.ns\\\", \\\"home\\\");\\r\\n        }\\r\\n        if (!ns.scriptRunning(\\\"purchase-server.ns\\\", \\\"home\\\")) {\\r\\n            ns.exec(\\\"purchase-server.ns\\\", \\\"home\\\");\\r\\n        }\\r\\n        // if (!ns.scriptRunning(\\\"/quonic/hacknet-auto.js\\\", \\\"home\\\")) {\\r\\n        //     ns.exec(\\\"/quonic/hacknet-auto.js\\\", \\\"home\\\");\\r\\n        // }\\r\\n        if (!ns.scriptRunning(\\\"/steamsplay/stockbot.js\\\", \\\"home\\\")\\r\\n            && ns.getServerMoneyAvailable(\\\"home\\\") > 1e7) {\\r\\n            ns.exec(\\\"/steamsplay/stockbot.js\\\", \\\"home\\\");\\r\\n        }\\r\\n        if (!ns.scriptRunning(\\\"/steamsplay/auto_farm.js\\\", \\\"home\\\")) {\\r\\n            ns.exec(\\\"/steamsplay/auto_farm.js\\\", \\\"home\\\");\\r\\n        }\\r\\n\\r\\n        // if (!ns.scriptRunning(\\\"setup-server.ns\\\", \\\"home\\\")) {\\r\\n        //     ns.exec(\\\"setup-server.ns\\\", \\\"home\\\");\\r\\n        // }\\r\\n\\r\\n        await ns.sleep(10 * 60 * 1000);\\r\\n    }\\r\\n}\\r\\n\\r\\n// buy TOR Router: 200k\\r\\n/*\\r\\nbuy -l;\\r\\nbuy BruteSSH.exe;\\r\\nbuy DeepscanV1.exe;\\r\\nbuy ServerProfiler.exe;\\r\\nbuy AutoLink.exe;\\r\\nbuy FTPCrack.exe;\\r\\nbuy relaySMTP.exe;\\r\\nbuy DeepscanV2.exe;\\r\\nbuy HTTPWorm.exe;\\r\\nbuy SQLInject.exe;\\r\\nbuy Formulas.exe;\\r\\nbuy -l;\\r\\n\\r\\nrun find_server.js CSEC;\\r\\nconnect CSEC; backdoor; // !!! CyberSec\\r\\n\\r\\nrun find_server.js avmnite-02h;\\r\\nconnect avmnite-02h; backdoor; // !!! NiteSec\\r\\n\\r\\nrun find_server.js I.I.I.I;\\r\\nconnect I.I.I.I; backdoor; // !!! The Black Hand\\r\\n\\r\\nrun find_server.js run4theh111z;\\r\\nconnect run4theh111z; backdoor; // !!! BitRunners\\r\\n\\r\\n\\r\\nhome; connect n00dles; backdoor;\\r\\nconnect nectar-net; backdoor;\\r\\nconnect silver-helix; backdoor;\\r\\nconnect the-hub; backdoor;\\r\\nconnect silver-helix; connect nectar-net; connect phantasy; backdoor;\\r\\nconnect nectar-net; connect omega-net; backdoor;\\r\\nconnect comptek; backdoor;\\r\\nconnect rothman-uni; backdoor;\\r\\nconnect comptek; connect omega-net; connect netlink; backdoor;\\r\\nconnect catalyst; backdoor;\\r\\nconnect netlink; connect omega-net; connect johnson-ortho; backdoor;\\r\\nconnect omega-net; connect crush-fitness; backdoor;\\r\\nhome; connect foodnstuff; backdoor;\\r\\nhome; connect sigma-cosmetics; backdoor;\\r\\nhome; connect joesguns; backdoor;\\r\\nhome; connect hong-fang-tea; backdoor;\\r\\nhome; connect harakiri-sushi; backdoor;\\r\\nconnect zer0; backdoor;\\r\\nconnect neo-net; backdoor;\\r\\nconnect zer0; connect harakiri-sushi; connect max-hardware; backdoor;\\r\\nhome; connect iron-gym; backdoor;\\r\\nhome; connect darkweb; backdoor;\\r\\nhome; connect n00dles; connect nectar-net; connect omega-net; connect netlink; connect summit-uni; backdoor;\\r\\nhome; connect n00dles; connect nectar-net; connect omega-net; connect netlink; connect summit-uni; connect aevum-police; backdoor;\\r\\nhome; connect n00dles; connect nectar-net; connect omega-net; connect netlink; connect catalyst; connect millenium-fitness; backdoor;\\r\\nhome; connect n00dles; connect nectar-net; connect omega-net; connect netlink; connect syscore; connect rho-construction; backdoor;\\r\\nhome; connect n00dles; connect nectar-net; connect omega-net; connect netlink; connect syscore; connect rho-construction; connect snap-fitness; connect omnia; connect defcomm; connect zb-def; connect titan-labs; connect stormtech; connect .; backdoor;\\r\\n*/\",\"filename\":\"init-system.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":9.65,\"server\":\"home\",\"_hash\":\"79adbe3f59c38b17b3b28d1180c6d2182d87ed0ee52b7c2d5af812c96599ed1f\",\"moduleSequenceNumber\":15043}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-988643.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[2,50,37,199,80,147,37,73,52,18,71,101,177,136,143,3,126,171,14,26,13,78,178,67,89,15,185,115,9,9,165,52,66,171,59,164,28,73,195,92,60],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"76.6.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1114}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1115}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1116}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":45962291988,\"moneyMax\":1149057299700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1131,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"44.1.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1102}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1103}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1104}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":54328731101,\"moneyMax\":1358218277525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1218,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"21.1.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1090}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1091}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1092}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":27460943076,\"moneyMax\":686523576900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1123,\"serverGrowth\":62}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"90.8.7.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":50,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":51,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":134,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1096}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1097}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1098}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":38693349458,\"moneyMax\":967333736450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1079,\"serverGrowth\":66}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"72.1.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1084}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1085}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1086}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":21757297128,\"moneyMax\":543932428200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1288,\"serverGrowth\":81}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"45.4.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1072}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1073}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1074}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":24999367459,\"moneyMax\":624984186475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1069,\"serverGrowth\":69}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-880644-Netburners.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[176,56,26,193,110,22,64,147,49,12,19,16,16,90,195,160,56,142,104,166,121,29,116,162,140,10,147,80,102,93,177,11,129,90,53,154,158,112,22,99,158,106]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"25.5.2.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":48,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":49,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":134,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1060}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1061}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1062}}],\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":15407178650,\"moneyMax\":385179466250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":910,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"24.0.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1048}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1049}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1050}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":17726534909,\"moneyMax\":443163372725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":930,\"serverGrowth\":90}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"19.3.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1066}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1067}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1068}}],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":25387867801,\"moneyMax\":634696695025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1181,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"34.9.8.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":44,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":47,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":285.40999999999235,\"pid\":2264,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":44,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":285.40999999999235,\"pid\":2265,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":494,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1024}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1025}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1026}}],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1547650391,\"moneyMax\":38691259775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1121,\"serverGrowth\":90}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"72.8.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1108}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1109}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1110}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1238,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"10.0.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1036}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1037}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1038}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1081833995,\"moneyMax\":27045849875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1025,\"serverGrowth\":73}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-363061-BitRunners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[5,6],[9,11],[4,12],[3,13],[13,15],[4,8],[21,25],[18,24]],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"32.3.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":952}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":953}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":954}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":811570777,\"moneyMax\":20289269425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":978,\"serverGrowth\":73}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-304376-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[8,1,129,187,75,115,157,134,103,140,48,88,198,14,13,134,177,83,104,29,185,24,71,77,47,77,89]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"73.7.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":994}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":995}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":996}}],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":616168426,\"moneyMax\":15404210650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":878,\"serverGrowth\":46}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"88.4.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":5.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.4100000000201,\"pid\":1852,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.4100000000201,\"pid\":1853,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"helios\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":304}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":305}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":306}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1042}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1043}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1044}}],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87.002,\"minDifficulty\":29,\"moneyAvailable\":733530027,\"moneyMax\":18338347400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-145634.cct\",\"type\":\"Total Ways to Sum\",\"data\":26,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"39.5.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":122,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":2555,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":2556,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":7,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"vitalife\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":307}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":308}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":309}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1030}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1031}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1032}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":82.962,\"minDifficulty\":28,\"moneyAvailable\":783349191.9459459,\"moneyMax\":19503598675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-732809-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[54,127,190],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"8.6.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":970}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":971}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":972}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":976496807,\"moneyMax\":24412420175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":877,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"71.6.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":117.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":863.4100000000594,\"pid\":1613,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":61,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.6100000000201,\"pid\":1846,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.6100000000201,\"pid\":1847,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":5,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":958}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":959}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":960}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1180567822,\"moneyMax\":29514195550,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":860,\"serverGrowth\":85}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"31.8.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":118,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":119,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":310}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":311}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":312}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1006}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1007}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1008}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":78.51,\"minDifficulty\":26,\"moneyAvailable\":116.85665816133935,\"moneyMax\":18810016525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":811,\"serverGrowth\":78}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"74.8.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":120,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":121,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"microdyne\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":313}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":314}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":315}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1012}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1013}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1014}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":100,\"minDifficulty\":24,\"moneyAvailable\":12660196275,\"moneyMax\":12660196275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":76}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"37.1.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":988}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":989}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":990}}],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":830468597,\"moneyMax\":20761714925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"90.9.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":904}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":905}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":906}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":835271500,\"moneyMax\":20881787500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":76}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-982576-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[30,112,55,120,38,85,40,134,50,73,39,73,169,150,56,106,24,10,9,114,83,167,101,84,153,197,52,18,34,151,57],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"51.3.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"aerocorp\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":316}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":916}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":917}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":918}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1064334031,\"moneyMax\":26608350775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":64}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-407878.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":356377333,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"82.2.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":57.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":664.2100000000141,\"pid\":1894,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":3,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":664.2100000000141,\"pid\":1895,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":30,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":928}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":929}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":930}}],\"serversOnNetwork\":[\"global-pharm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":977117766,\"moneyMax\":24427944150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":928,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"89.4.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":317}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":976}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":977}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":978}}],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":26925947675,\"moneyMax\":26925947675,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":786,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"4.5.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"applied-energetics\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":318}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1018}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1019}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1020}}],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":100,\"minDifficulty\":24,\"moneyAvailable\":19745266250,\"moneyMax\":19745266250,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"64.9.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":116,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":117,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"solaris\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":319}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":320}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":321}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":964}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":965}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":966}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":876528245,\"moneyMax\":21913206125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":77}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"38.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":322}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":934}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":935}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":936}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1617388623,\"moneyMax\":40434715575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":853,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"83.1.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":114,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":115,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":323}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":324}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":325}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":910}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":911}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":912}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84.002,\"minDifficulty\":28,\"moneyAvailable\":1749773679,\"moneyMax\":43745055275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"59.7.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":326}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":982}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":983}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":984}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":100,\"minDifficulty\":24,\"moneyAvailable\":29782860025,\"moneyMax\":29782860025,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":65}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"78.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zeus-med\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":946}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":947}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":948}}],\"serversOnNetwork\":[\"omnia\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1407861329,\"moneyMax\":35196533225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":846,\"serverGrowth\":71}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"27.0.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":57.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":779.4100000000403,\"pid\":1723,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":30,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.4100000000201,\"pid\":1850,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.4100000000201,\"pid\":1851,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"unitalife\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":328}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":329}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":330}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":940}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":941}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":942}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":76.61,\"minDifficulty\":25,\"moneyAvailable\":0,\"moneyMax\":25776294900,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":783,\"serverGrowth\":74}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"83.9.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.209999999999994,\"pid\":2558,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":2,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.209999999999994,\"pid\":2559,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":16,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":332}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":333}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":334}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":892}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":893}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":894}}],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":99.5,\"minDifficulty\":21,\"moneyAvailable\":18927440875,\"moneyMax\":18927440875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":696,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"61.7.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":110,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.01000000000083,\"pid\":2463,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.01000000000083,\"pid\":2464,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":7,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":335}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":336}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":338}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":880}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":881}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":882}}],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":99.95,\"minDifficulty\":13,\"moneyAvailable\":15744712175,\"moneyMax\":15744712175,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":511,\"serverGrowth\":44}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"35.3.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":57.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.210000000000235,\"pid\":2503,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999973,\"pid\":2549,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":32,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///190b4136-2f80-4e85-a310-51de5b077a09\"}],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":340}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":341}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":342}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":874}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":875}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":876}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":100,\"minDifficulty\":22,\"moneyAvailable\":16379890250,\"moneyMax\":16379890250,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":533,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-809667-Sector-12.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,13],[2,7],[1,4],[14,24]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"73.0.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":112,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":354.6099999999884,\"pid\":2201,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":354.6099999999884,\"pid\":2202,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":7,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":343}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":344}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":346}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":898}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":899}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":900}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":53.40200000000001,\"minDifficulty\":24,\"moneyAvailable\":0,\"moneyMax\":8023683275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":429,\"serverGrowth\":30}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"56.6.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":14,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.6099999999795,\"pid\":2045,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.6099999999795,\"pid\":2046,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":7,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":348}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":349}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":350}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":856}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":857}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":858}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":4934631825,\"moneyMax\":4934631825,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":428,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"44.4.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":182.2099999999982,\"pid\":2364,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":15,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.210000000000306,\"pid\":2497,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":352}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":353}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":862}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":863}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":864}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":100,\"minDifficulty\":28,\"moneyAvailable\":26734674050,\"moneyMax\":26734674050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":731,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"1.4.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":60,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":3,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.00999999998936,\"pid\":2213,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":3,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.00999999998936,\"pid\":2214,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":30,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///190b4136-2f80-4e85-a310-51de5b077a09\"}],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":354}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":355}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":356}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":357}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":844}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":845}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":846}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":6188389700,\"moneyMax\":6188389700,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":443,\"serverGrowth\":59}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"61.7.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":358}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":359}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":360}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":850}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":851}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":852}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":99.85000000000001,\"minDifficulty\":23,\"moneyAvailable\":12282126250,\"moneyMax\":12282126250,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":582,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"5.7.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":108,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":109,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"catalyst\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":362}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"catalyst\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":363}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":364}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":365}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":868}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":869}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":870}}],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21.72,\"minDifficulty\":21,\"moneyAvailable\":0,\"moneyMax\":11999056175,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":406,\"serverGrowth\":46}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-243872.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()()a)a(a(a(()a(\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"17.7.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":2550,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":15,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.209999999999994,\"pid\":2557,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"the-hub\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":366}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":367}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":368}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":369}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":814}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":815}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":816}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":4958639425,\"moneyMax\":4958639425,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":324,\"serverGrowth\":47}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"28.4.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":370}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":372}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":373}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":802}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":803}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":804}}],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22.236,\"minDifficulty\":22,\"moneyAvailable\":2584847016.269511,\"moneyMax\":5789676525,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":306,\"serverGrowth\":62}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-182446-CyberSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[1,15,19,47,37,29,11,49,30,14,17,8,24],[19,27,17,6,18,1,42,9,29,4,29,35,40],[14,37,22,8,8,30,2,13,15,17,47,18,26],[22,30,43,25,37,50,11,44,11,10,42,27,33],[34,26,9,34,28,33,20,10,3,1,40,27,22],[22,34,13,29,6,38,9,32,21,50,22,16,39],[5,39,31,11,6,17,24,30,35,28,28,5,14]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"19.6.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":104,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":105,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"netlink\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":374}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":375}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":376}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":377}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":808}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":809}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":810}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":24.355999999999998,\"minDifficulty\":23,\"moneyAvailable\":3049428972.2804804,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":382,\"serverGrowth\":63}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"0.8.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":378}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":379}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":380}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":820}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":821}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":822}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":81.80600000000004,\"minDifficulty\":14,\"moneyAvailable\":1764500875,\"moneyMax\":1764500875,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":290,\"serverGrowth\":36}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-278832-Netburners.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[194,132,69,161,155,17,80,17,80,163,179,51,11,132,62,96,63,53,155,23,134,163,99,198,106,145,187,175,147,122,42]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"57.9.4.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":128,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///5600d0dc-926c-48bf-b45c-df2ad9e5b4e9\"}],\"ramUsage\":2.4,\"server\":\"n00dles\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":382}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":383}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///d6b2125f-74b1-437a-9668-34dc9ff3bbad\"}],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":384}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":385}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":712}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":713}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":714}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"92.9.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2562,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2563,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":386}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":388}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":389}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":718}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":719}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":720}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":4538.541931995876,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"31.0.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2564,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2565,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":390}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":392}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":393}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":724}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":725}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":726}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":7806.173547902864,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"67.0.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.610000000000156,\"pid\":2516,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.610000000000156,\"pid\":2517,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"joesguns\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":394}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":395}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":396}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":730}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":731}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":732}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":8798.1168669511,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"55.6.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":2524,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":15,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.609999999999935,\"pid\":2535,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"zer0\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":398}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":399}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":400}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":401}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":754}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":755}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":756}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":32.82000000000133,\"minDifficulty\":8,\"moneyAvailable\":30315131.80404373,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"31.9.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":102,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":103,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":402}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":403}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":404}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":405}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":766}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":767}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":768}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":10.119999999999358,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"64.9.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":26.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":343.40999999998905,\"pid\":2207,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":14,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":182.40999999999818,\"pid\":2363,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"neo-net\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":406}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":407}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":408}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":409}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":784}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":785}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":786}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":33.54800000000098,\"minDifficulty\":8,\"moneyAvailable\":12646528.320317976,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"79.4.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":54,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":3,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":133.41000000000096,\"pid\":2417,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":3,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":133.41000000000096,\"pid\":2418,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":30,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///190b4136-2f80-4e85-a310-51de5b077a09\"}],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":410}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":411}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":413}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":778}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":779}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":780}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":677276000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"63.4.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2566,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2567,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":414}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":415}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":416}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":417}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":736}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":737}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":738}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.027999999999998,\"minDifficulty\":5,\"moneyAvailable\":3710.656267142027,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"22.6.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":2571,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":2572,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":418}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":419}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":420}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":742}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":743}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":744}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.539999999999991,\"minDifficulty\":5,\"moneyAvailable\":53879.52306077506,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"13.6.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.41000000000054,\"pid\":2479,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":2570,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":15,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"phantasy\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":422}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":423}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":424}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":425}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":796}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":797}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":798}}],\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":45.50000000000009,\"minDifficulty\":7,\"moneyAvailable\":552766777.4543111,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"27.7.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.4100000000201,\"pid\":1859,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":2,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":664.2100000000141,\"pid\":1896,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":426}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":427}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":428}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":429}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":772}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":773}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":774}}],\"serversOnNetwork\":[\"iron-gym\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":96.48200000000018,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"81.5.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.61000000000121,\"pid\":2429,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.009999999999955,\"pid\":2541,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":15,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"omega-net\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":430}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":431}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":432}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":433}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":790}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":791}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":792}}],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":9,\"minDifficulty\":9,\"moneyAvailable\":1634521100,\"moneyMax\":1634521100,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":180,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-200530-NiteSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[7,2,-1,-9,-2,5,-5,-10,0,9,6,-6,-6,-1,7,-5,-6,-1,6,-1,-3,0,8,-5,-6,-1,-10,6,0,-4,-6,-7,-8,-7,10,5,-7,-10],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"69.3.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":434}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":435}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":436}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":437}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":826}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":827}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":828}}],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13.344,\"minDifficulty\":13,\"moneyAvailable\":692.0850390513439,\"moneyMax\":1415600800,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":244,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"6.3.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":24.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.6099999999963,\"pid\":2334,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":13,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":133.21000000000097,\"pid\":2419,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":438}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":439}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":440}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":441}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":748}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":749}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":750}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.843999999999994,\"minDifficulty\":10,\"moneyAvailable\":4671.191282357873,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"4.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.21000000000053,\"pid\":2480,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":15,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999993,\"pid\":2531,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":442}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":443}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":444}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":445}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":886}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":887}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":888}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":99.95,\"minDifficulty\":18,\"moneyAvailable\":6250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":516,\"serverGrowth\":44}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"45.8.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":5.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.4100000000201,\"pid\":1854,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.4100000000201,\"pid\":1855,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1078}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1079}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1080}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1016,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-420375.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[7,1],[9,6,1],[4,4,9,8],[4,1,7,5,4],[9,1,1,5,8,3],[1,2,4,9,9,5,8],[2,5,4,3,9,6,4,7],[8,4,7,7,8,1,9,2,9]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"81.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":446}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":447}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":448}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":449}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":922}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":923}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":924}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":11250000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":690,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"88.0.6.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":46,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":47,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":134,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///190b4136-2f80-4e85-a310-51de5b077a09\"}],\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":450}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":451}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":452}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":453}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1000}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1001}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1002}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"25.1.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":61.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":952.2100000000796,\"pid\":1496,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":30,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.6100000000201,\"pid\":1848,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.6100000000201,\"pid\":1849,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///190b4136-2f80-4e85-a310-51de5b077a09\"}],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":454}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":455}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":456}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":457}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":838}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":839}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":840}}],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":360,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"28.7.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":56,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":3,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"pid\":2519,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":3,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"pid\":2520,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":30,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///190b4136-2f80-4e85-a310-51de5b077a09\"}],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":458}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":459}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":460}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":461}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":832}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":833}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":834}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":211,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"92.9.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":124,\"ramUsage\":1.75,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":284.2099999999924,\"pid\":2270,\"ramUsage\":1.75,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":284.2099999999924,\"pid\":2271,\"ramUsage\":1.75,\"server\":\".\",\"threads\":7,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\".\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":462}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\".\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":464}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":465}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":1054}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":1055}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\".\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":1056}}],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":522,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-138078-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[17,5,155,21,55,75,33,178,51,179,149,117,116,59,1,82,115,188,37,168,37,159,111,4,138,138,164,89,110,23,111,33,116,148,137,53,121,34,57,19,124]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"79.8.0.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":126,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":127,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///1bba57ed-4fbd-4709-a5a0-e3d9fae7a75c\"}],\"ramUsage\":2.4,\"server\":\"CSEC\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":466}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"CSEC\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":467}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":468}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":469}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":760}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":761}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":762}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"43.3.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"37.4.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"61.2.8.3\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":473}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv\",\"httpPortOpen\":true,\"ip\":\"91.2.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1363.410000000173,\"pid\":973,\"ramUsage\":1.75,\"server\":\"pserv\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1363.410000000173,\"pid\":974,\"ramUsage\":1.75,\"server\":\"pserv\",\"threads\":551251,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":474}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":475}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":476}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":562}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":563}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":564}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":true,\"ip\":\"98.8.2.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":4,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":5,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":551251,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":477}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":478}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":479}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":568}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":569}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":570}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":true,\"ip\":\"21.5.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":161142.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":139.8100000000006,\"pid\":2409,\"ramUsage\":1.7,\"server\":\"pserv-1\",\"threads\":818,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":139.8100000000006,\"pid\":2410,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":47117,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000017,\"pid\":2509,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":73,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":2569,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":44097,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":480}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":481}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":482}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":574}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":575}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":576}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":true,\"ip\":\"50.6.4.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":8,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":9,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":551251,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":483}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":484}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":580}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":581}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":582}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":true,\"ip\":\"86.4.1.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":10,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.21000000000085,\"pid\":2458,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":551251,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":486}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":487}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":488}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":586}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":587}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":588}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":true,\"ip\":\"50.0.0.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":12,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":489}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":490}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":491}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":592}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":593}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":594}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":true,\"ip\":\"19.8.7.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":13,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":492}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":493}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":494}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":598}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":599}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":600}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":true,\"ip\":\"12.6.9.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":14,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":15,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":551251,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":495}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":496}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":497}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":604}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":605}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":606}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":true,\"ip\":\"53.0.7.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":16,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":498}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":499}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":500}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":610}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":611}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":612}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":true,\"ip\":\"56.5.9.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":17,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":18,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":551251,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":501}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":502}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":503}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":616}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":617}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":618}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":true,\"ip\":\"8.6.9.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":19,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"pid\":2546,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":44101,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"pid\":2547,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":507150,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-9\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":504}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":505}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":506}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":622}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":623}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-9\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":624}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":true,\"ip\":\"65.7.7.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":21,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-10\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":507}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":508}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":509}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":628}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":629}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-10\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":630}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":true,\"ip\":\"92.8.1.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":22,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":23,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"threads\":551251,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-11\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":510}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":511}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":634}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":635}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-11\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":636}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":true,\"ip\":\"43.2.7.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":24,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":25,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":551251,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-12\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":513}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":514}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":515}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":640}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":641}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-12\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":642}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":true,\"ip\":\"94.2.5.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":26,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":27,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":551251,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-13\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":516}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":517}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":518}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":646}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":647}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-13\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":648}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":true,\"ip\":\"0.2.0.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":863.8100000000595,\"pid\":1611,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":44101,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":863.8100000000595,\"pid\":1612,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":507150,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":583.0099999999957,\"pid\":1976,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":3835,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":583.0099999999957,\"pid\":1977,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":44100,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-14\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":519}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":521}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":652}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":653}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-14\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":654}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":true,\"ip\":\"49.6.9.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":30,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-15\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":522}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":523}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":524}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":658}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":659}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-15\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":660}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":true,\"ip\":\"23.8.1.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":31,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.6100000000001,\"pid\":2518,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":551251,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-16\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":525}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":526}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":527}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":664}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":665}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-16\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":666}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":true,\"ip\":\"10.8.4.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":696.2100000000214,\"pid\":1832,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":47935,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":696.2100000000214,\"pid\":1833,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":551251,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-17\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":528}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":529}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":530}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":670}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":671}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-17\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":672}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":true,\"ip\":\"41.0.8.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1988.8100000003126,\"pid\":34,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-18\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":531}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":532}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":533}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":676}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":677}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-18\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":678}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":true,\"ip\":\"67.2.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":240.0099999999949,\"pid\":2311,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-19\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":534}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":535}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":536}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":682}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":683}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-19\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":684}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":true,\"ip\":\"33.4.2.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":333.00999999998965,\"pid\":2220,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-20\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":537}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":538}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":539}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":688}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":689}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-20\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":690}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":true,\"ip\":\"63.5.5.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":478.2099999999814,\"pid\":2074,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-21\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":540}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":541}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":542}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":694}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":695}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-21\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":696}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":true,\"ip\":\"53.5.9.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048544,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1766.0100000002656,\"pid\":423,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":44101,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1766.0100000002656,\"pid\":424,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":507150,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":691.4100000000203,\"pid\":1843,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":19,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":594.0099999999982,\"pid\":1962,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":3816,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":594.0099999999982,\"pid\":1963,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":43883,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":2568,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":199,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-22\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":543}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":544}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":545}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":700}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":701}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-22\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":702}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":true,\"ip\":\"30.3.4.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048542.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1929.210000000301,\"pid\":192,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":44101,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1929.210000000301,\"pid\":193,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":507150,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":654.0100000000118,\"pid\":1906,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":3553,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":654.0100000000118,\"pid\":1907,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":40853,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":134.21000000000092,\"pid\":2416,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":3294,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":2548,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":216,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///f1ebc87e-e749-4cd2-b8c9-c2984b2374f4\"}],\"ramUsage\":1.7,\"server\":\"pserv-23\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":546}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///3f41843f-efcb-4b35-a739-900512915289\"}],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":547}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///c32fba2d-0868-4e23-87ea-7aed27fabded\"}],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":548}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":706}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":707}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-23\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":708}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":3.7312,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":3232.076487193503}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":5.377,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":129772.29108295077}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":95.4042,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":98473.56211570564}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":26.657,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":15962.962279895928}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":93.9878,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":51820.13143033196}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":86.6214,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":47995.20585007101}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":23868.149673997217,\"lastPrice\":23932.987895399783,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":11.78503136126882,\"otlkMagForecast\":69.7907031712586,\"cap\":100175641,\"spreadPerc\":0.3,\"shareTxForMovement\":38774,\"shareTxUntilMovement\":25104,\"totalShares\":135800000,\"maxShares\":27200000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":39375.46901179692,\"lastPrice\":39502.80723750812,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":15.070433953431209,\"otlkMagForecast\":30.81576009744325,\"cap\":569375419,\"spreadPerc\":0.3,\"shareTxForMovement\":56595,\"shareTxUntilMovement\":46406,\"totalShares\":76800000,\"maxShares\":15400000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":9502.170101095337,\"lastPrice\":9551.337341976889,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":12.825763397153258,\"otlkMagForecast\":35.77708607234606,\"cap\":25513295,\"spreadPerc\":0.4,\"shareTxForMovement\":58431,\"shareTxUntilMovement\":53018,\"totalShares\":115000000,\"maxShares\":23000000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":2480.7303059285136,\"lastPrice\":2492.443233626574,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":9.506514711443002,\"otlkMagForecast\":39.236481180697254,\"cap\":49350271,\"spreadPerc\":0.4,\"shareTxForMovement\":78273,\"shareTxUntilMovement\":78273,\"totalShares\":122300000,\"maxShares\":24500000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":16440.379888291347,\"lastPrice\":16513.750812457987,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":10.601805303021521,\"otlkMagForecast\":40.7420280429384,\"cap\":856014513,\"spreadPerc\":0.2,\"shareTxForMovement\":43233,\"shareTxUntilMovement\":43233,\"totalShares\":43400000,\"maxShares\":8700000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":79732.99400592796,\"lastPrice\":79190.06925829418,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":29.41389417681127,\"otlkMagForecast\":18.477885691323795,\"cap\":400888653,\"spreadPerc\":0.7,\"shareTxForMovement\":52580,\"shareTxUntilMovement\":38782,\"totalShares\":33700000,\"maxShares\":6700000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":41723.05981224491,\"lastPrice\":41928.15373550294,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":12.56176582969038,\"otlkMagForecast\":62.317376043063085,\"cap\":207081303,\"spreadPerc\":0.5,\"shareTxForMovement\":48205,\"shareTxUntilMovement\":48205,\"totalShares\":76300000,\"maxShares\":15300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":1179507.800868036,\"lastPrice\":1188815.1005599666,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":12.76310818352496,\"otlkMagForecast\":33.820962088554545,\"cap\":163302468,\"spreadPerc\":1,\"shareTxForMovement\":33055,\"shareTxUntilMovement\":19135,\"totalShares\":55600000,\"maxShares\":11100000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":20965.343174682173,\"lastPrice\":21079.2485742299,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":6.2211767722974525,\"otlkMagForecast\":42.81561129988495,\"cap\":451578649,\"spreadPerc\":0.5,\"shareTxForMovement\":90279,\"shareTxUntilMovement\":90279,\"totalShares\":51100000,\"maxShares\":10200000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":7214.3373845309,\"lastPrice\":7183.6716438574485,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":10.162732237479716,\"otlkMagForecast\":38.183288407746986,\"cap\":192137918,\"spreadPerc\":0.3,\"shareTxForMovement\":82308,\"shareTxUntilMovement\":82308,\"totalShares\":60600000,\"maxShares\":12100000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":8876.759996586805,\"lastPrice\":8908.911816081672,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":7.596520545145211,\"otlkMagForecast\":58.64859734993848,\"cap\":97229639,\"spreadPerc\":0.2,\"shareTxForMovement\":85073,\"shareTxUntilMovement\":85073,\"totalShares\":51900000,\"maxShares\":10400000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":4095.2982879047972,\"lastPrice\":4075.528217411708,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":7.635908072881698,\"otlkMagForecast\":43.55049221385606,\"cap\":124168809,\"spreadPerc\":0.3,\"shareTxForMovement\":43244,\"shareTxUntilMovement\":43244,\"totalShares\":113800000,\"maxShares\":22800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":20796.827654624733,\"lastPrice\":20889.640745023018,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":8.515786687653256,\"otlkMagForecast\":58.8798332447894,\"cap\":68690778,\"spreadPerc\":0.7,\"shareTxForMovement\":95703,\"shareTxUntilMovement\":95703,\"totalShares\":57700000,\"maxShares\":11500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":13641.66193598274,\"lastPrice\":13694.601649066322,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":10.785287191845745,\"otlkMagForecast\":40.5695365982975,\"cap\":427569530,\"spreadPerc\":0.5,\"shareTxForMovement\":85197,\"shareTxUntilMovement\":85197,\"totalShares\":49300000,\"maxShares\":9900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":11321.679974139206,\"lastPrice\":11279.36678463631,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":5.081125408577211,\"otlkMagForecast\":54.69130861914534,\"cap\":281780712,\"spreadPerc\":0.4,\"shareTxForMovement\":65702,\"shareTxUntilMovement\":65702,\"totalShares\":43600000,\"maxShares\":8700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":26328.572879909312,\"lastPrice\":26447.776215799575,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.378555639856361,\"otlkMagForecast\":56.369896408483065,\"cap\":315410835,\"spreadPerc\":0.4,\"shareTxForMovement\":100206,\"shareTxUntilMovement\":100206,\"totalShares\":44600000,\"maxShares\":8900000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":12026.24840150542,\"lastPrice\":12088.476023802987,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.365256184903034,\"otlkMagForecast\":55.20450975607156,\"cap\":569925160,\"spreadPerc\":0.4,\"shareTxForMovement\":58192,\"shareTxUntilMovement\":58192,\"totalShares\":30100000,\"maxShares\":6000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":63488.02169135774,\"lastPrice\":63713.870359650085,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":10.599708572535752,\"otlkMagForecast\":61.70722057546353,\"cap\":310867729,\"spreadPerc\":0.4,\"shareTxForMovement\":102386,\"shareTxUntilMovement\":102386,\"totalShares\":28400000,\"maxShares\":5700000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":53127.9540197139,\"lastPrice\":52874.881971067465,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":5.685231739234635,\"otlkMagForecast\":44.11254321484393,\"cap\":495405008,\"spreadPerc\":0.6,\"shareTxForMovement\":44452,\"shareTxUntilMovement\":44452,\"totalShares\":30100000,\"maxShares\":6000000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":3608.733280037495,\"lastPrice\":3549.0505631663605,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.6,\"b\":true,\"otlkMag\":5.333788201685398,\"otlkMagForecast\":55.88340705535304,\"cap\":174823290,\"spreadPerc\":1.1,\"shareTxForMovement\":27757,\"shareTxUntilMovement\":27757,\"totalShares\":60200000,\"maxShares\":12000000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":3154.772606284259,\"lastPrice\":3181.9109133502448,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.33,\"b\":false,\"otlkMag\":8.166147428959874,\"otlkMagForecast\":42.52673486617738,\"cap\":33371845,\"spreadPerc\":0.5,\"shareTxForMovement\":69228,\"shareTxUntilMovement\":69228,\"totalShares\":51000000,\"maxShares\":10200000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3805.6376177223196,\"lastPrice\":3793.125511015111,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":false,\"otlkMag\":5.086948836751197,\"otlkMagForecast\":45.852853209393594,\"cap\":63100468,\"spreadPerc\":0.8,\"shareTxForMovement\":88595,\"shareTxUntilMovement\":88595,\"totalShares\":34800000,\"maxShares\":7000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":11348.616024742849,\"lastPrice\":11495.419368564399,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2,\"b\":false,\"otlkMag\":16.265602473065982,\"otlkMagForecast\":33.08489768654534,\"cap\":70565829,\"spreadPerc\":1.6,\"shareTxForMovement\":72967,\"shareTxUntilMovement\":61924,\"totalShares\":41900000,\"maxShares\":8400000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":37136.82518156909,\"lastPrice\":36754.09330077805,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.61,\"b\":false,\"otlkMag\":5.463635773380769,\"otlkMagForecast\":44.470374249922706,\"cap\":82181032,\"spreadPerc\":0.6,\"shareTxForMovement\":15810,\"shareTxUntilMovement\":15810,\"totalShares\":27900000,\"maxShares\":5600000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2970.988575622278,\"lastPrice\":2987.514375266446,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.86,\"b\":true,\"otlkMag\":5.6000711216275825,\"otlkMagForecast\":55.6202395241551,\"cap\":17220070,\"spreadPerc\":0.6,\"shareTxForMovement\":122319,\"shareTxUntilMovement\":122319,\"totalShares\":53700000,\"maxShares\":10700000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":91631.9698671562,\"lastPrice\":93492.94136276035,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.14,\"b\":false,\"otlkMag\":22.22158573586209,\"otlkMagForecast\":22.37701701917414,\"cap\":17042043,\"spreadPerc\":1.8,\"shareTxForMovement\":41408,\"shareTxUntilMovement\":18402,\"totalShares\":12800000,\"maxShares\":2600000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1372.599208683373,\"lastPrice\":1381.6545946522283,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":true,\"otlkMag\":5.502070117993473,\"otlkMagForecast\":54.19307636868143,\"cap\":9478207,\"spreadPerc\":0.4,\"shareTxForMovement\":31441,\"shareTxUntilMovement\":31441,\"totalShares\":44200000,\"maxShares\":8800000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1648.9735938158328,\"lastPrice\":1641.1187999836443,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":2.0174280046530386,\"otlkMagForecast\":51.180892546065756,\"cap\":26098464,\"spreadPerc\":0.7,\"shareTxForMovement\":85032,\"shareTxUntilMovement\":85032,\"totalShares\":42300000,\"maxShares\":8500000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1063.4843425905149,\"lastPrice\":1071.8761204887887,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":5.959643276793542,\"otlkMagForecast\":45.270711659577344,\"cap\":23353861,\"spreadPerc\":0.8,\"shareTxForMovement\":31594,\"shareTxUntilMovement\":31594,\"totalShares\":10100000,\"maxShares\":2000000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":691.2019142806347,\"lastPrice\":704.4796625801426,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.97,\"b\":false,\"otlkMag\":12.227797858307838,\"otlkMagForecast\":38.59123547303179,\"cap\":6884611,\"spreadPerc\":0.6,\"shareTxForMovement\":49713,\"shareTxUntilMovement\":46802,\"totalShares\":76100000,\"maxShares\":15200000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":898.267667197216,\"lastPrice\":888.3277586996967,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.73,\"b\":true,\"otlkMag\":12.054274336255247,\"otlkMagForecast\":70.8870233899183,\"cap\":8061128,\"spreadPerc\":0.6,\"shareTxForMovement\":60465,\"shareTxUntilMovement\":41965,\"totalShares\":185500000,\"maxShares\":37100000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":12551.080039395052,\"lastPrice\":12488.881908451945,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":8.461678707302436,\"otlkMagForecast\":40.97123813821749,\"cap\":100220785,\"spreadPerc\":0.3,\"shareTxForMovement\":127271,\"shareTxUntilMovement\":127271,\"totalShares\":19100000,\"maxShares\":3800000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":18761.730781990376,\"lastPrice\":18835.753629062176,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":12.134507546515744,\"otlkMagForecast\":63.82382243872954,\"cap\":273822130,\"spreadPerc\":0.6,\"shareTxForMovement\":170825,\"shareTxUntilMovement\":170825,\"totalShares\":22700000,\"maxShares\":4500000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":27,\"lastUpdate\":1641577146579,\"ticksUntilCycle\":22}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1641444594178","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}