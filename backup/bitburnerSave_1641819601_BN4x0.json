{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":472,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.16,\"hacking_speed_mult\":1.16,\"hacking_money_mult\":1.16,\"hacking_grow_mult\":1.16,\"hacking_exp\":176056425.74636948,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":6.504120000000002,\"intelligence_exp\":0,\"hacking_mult\":1.16,\"strength_mult\":1.16,\"defense_mult\":1.16,\"dexterity_mult\":1.16,\"agility_mult\":1.16,\"charisma_mult\":1.16,\"hacking_exp_mult\":1.16,\"strength_exp_mult\":1.16,\"defense_exp_mult\":1.16,\"dexterity_exp_mult\":1.16,\"agility_exp_mult\":1.16,\"charisma_exp_mult\":1.16,\"company_rep_mult\":1.16,\"faction_rep_mult\":1.16,\"money\":5991870809.753498,\"city\":\"Aevum\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"Alpha Enterprises\":\"Software Consultant\"},\"companyName\":\"Alpha Enterprises\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":150270.39999970657,\"ram\":64,\"totalMoneyGenerated\":36557479.20726664,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":138201.79999905388,\"ram\":64,\"totalMoneyGenerated\":36567542.1714326,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":138109.19999905454,\"ram\":64,\"totalMoneyGenerated\":36516890.28900376,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":137804.5999990567,\"ram\":64,\"totalMoneyGenerated\":36509023.720148265,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":136966.39999906247,\"ram\":64,\"totalMoneyGenerated\":36504063.6946864,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":134847.19999909186,\"ram\":64,\"totalMoneyGenerated\":38198688.7889138,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":131955.3999991256,\"ram\":64,\"totalMoneyGenerated\":38242276.20325188,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":126405.3999991582,\"ram\":64,\"totalMoneyGenerated\":38234540.91822052,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":123404.1999991717,\"ram\":64,\"totalMoneyGenerated\":38240220.8579655,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":117800.39999919775,\"ram\":64,\"totalMoneyGenerated\":38208728.46155934,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":108310.39999927684,\"ram\":64,\"totalMoneyGenerated\":38141415.39082585,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":94108.59999936685,\"ram\":64,\"totalMoneyGenerated\":37942747.13036491,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":86842.7999994033,\"ram\":64,\"totalMoneyGenerated\":37750969.13719468,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":83974.19999941486,\"ram\":64,\"totalMoneyGenerated\":37673172.75334374,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":70849.39999961026,\"ram\":64,\"totalMoneyGenerated\":34906961.653959244,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":67676.19999966363,\"ram\":64,\"totalMoneyGenerated\":33944765.65013375,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":63188.59999973908,\"ram\":64,\"totalMoneyGenerated\":32257334.57661633,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":60595.19999978276,\"ram\":64,\"totalMoneyGenerated\":31155233.897348303,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":54036.19999988349,\"ram\":64,\"totalMoneyGenerated\":28225870.878953308,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":43428.4000000365,\"ram\":64,\"totalMoneyGenerated\":23081078.349452008,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":31754.000000053587,\"ram\":64,\"totalMoneyGenerated\":16875739.668590236,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":531.9359343350255,\"onlineTimeSeconds\":25489.600000030798,\"ram\":64,\"totalMoneyGenerated\":13543583.566192271,\"name\":\"hacknet-node-21\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"CyberSec\",\"Sector-12\",\"Tian Di Hui\",\"Aevum\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.16,\"crime_success_mult\":1.16,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"CyberSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.087,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.31587692307692306,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":160.34100000000026,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":582.1611692308,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":455600,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.16,\"hacknet_node_money_mult\":1.16,\"hacknet_node_purchase_cost_mult\":0.84,\"hacknet_node_ram_cost_mult\":0.84,\"hacknet_node_core_cost_mult\":0.84,\"hacknet_node_level_cost_mult\":0.84,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"lastUpdate\":1641819601040,\"totalPlaytime\":520448600,\"playtimeSinceLastAug\":150347200,\"playtimeSinceLastBitnode\":150347200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2294928,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":144497908846.67554,\"hacknet\":739278327.0339862,\"hacknet_expenses\":-8307413628.816621,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":5991869809.753498,\"work\":3410.7479999999855,\"servers\":-73850294081.00484,\"other\":-5800000,\"augmentations\":-57079518134.87292}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2294928,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":144497908846.67554,\"hacknet\":739278327.0339862,\"hacknet_expenses\":-8307413628.816621,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":5991869809.753498,\"work\":3410.7479999999855,\"servers\":-73850294081.00484,\"other\":-5800000,\"augmentations\":-57079518134.87292}},\"scriptProdSinceLastAug\":139132848012,\"exploits\":[],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641819110646},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641819110661},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641819110665},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641819110669},{\"ID\":\"SF1.1\",\"unlockedOn\":1641819110672},{\"ID\":\"NS2\",\"unlockedOn\":1641819110675},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641819110678},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641819110681},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641819110685},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641819110689},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641819110691},{\"ID\":\"TOR\",\"unlockedOn\":1641819110694}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"53.0.7.7\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\"],\"ramUsed\":1837.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"init-system.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.291,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70145.80999949835,\"pid\":1,\"ramUsage\":10.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"functions.js\",\"url\":\"blob:file:///cb5eeede-7325-4d56-a5ea-8e2c6915161e\"},{\"filename\":\"init-system.ns\",\"url\":\"blob:file:///64c35b2c-23c9-4304-ab91-90af3e73b77b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":190.40999999999772,\"pid\":555,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1036,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.8100000000011,\"pid\":689,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"grow\\\");\\n    ns.enableLog(\\\"weaken\\\");\\n    ns.enableLog(\\\"hack\\\");\\n\\n    var target = ns.args[0] ? `${ns.args[0]}` : \\\"joesguns\\\";\\n\\n    // if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    //     ns.brutessh(target);\\n    // }\\n    // ns.nuke(target);\\n\\n    while (true) {\\n        // Defines how much money a server should have before we hack it\\n        // In this case, it is set to 75% of the server's max money\\n        let serverMaxMoney = ns.getServerMaxMoney(target);\\n        let currentMoney = ns.getServerMoneyAvailable(target);\\n        let moneyThresh = serverMaxMoney * 0.75;\\n\\n        // Defines the maximum security level the target server can\\n        // have. If the target's security level is higher than this,\\n        // we'll weaken it before doing anything else\\n        let minSecurity = ns.getServerMinSecurityLevel(target);\\n        let securityThresh = minSecurity + 5;\\n        let currentSecurity = ns.getServerSecurityLevel(target);\\n\\n        ns.print(`\\\\n\\\\n`);\\n        ns.print(`Target: ${target}`);\\n        ns.print(`Money: \\\\$${currentMoney.toLocaleString()}`);\\n        ns.print(`Max Money: \\\\$${serverMaxMoney.toLocaleString()}`);\\n        ns.print(`Thresh Dist: \\\\$${(moneyThresh - currentMoney).toLocaleString()}`);\\n        ns.print(`Security: ${currentSecurity.toLocaleString()}`);\\n        ns.print(`Threshold: ${securityThresh.toLocaleString()}`);\\n\\n        if (currentSecurity > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            ns.print(`weakening ${target}...`);\\n            const res = await ns.weaken(target);\\n            // ns.toast(`Weakened ${target}! ${res}`);\\n        } else if (currentMoney < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            ns.print(`growing ${target}...`);\\n            const res = await ns.grow(target);\\n            // ns.toast(`Grown ${target}! %${((res - 1) * 100).toFixed(3)}`);\\n        } else {\\n            // Otherwise, hack it\\n            // ns.toast(`hacking ${target}...`, \\\"info\\\");\\n            ns.print(`hacking ${target}...`);\\n            let stolen = await ns.hack(target);\\n            // ns.print(`Stolen ${Math.round(stolen)}`);\\n            // ns.toast(`Hacked ${target}! \\\\$${Math.round(stolen)}`);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.ns\",\"url\":\"blob:file:///083117ae-23fa-4f7b-bf33-91d9f935b4e5\"}],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"070dc45cab8b1c3b882b0de07e191c94a2da23e1aa34978879adf3e70986f4fb\",\"moduleSequenceNumber\":197}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n\\tconst servers = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n    for(const server of servers) {\\n        const used = ns.getServerUsedRam(server);\\n        const max = ns.getServerMaxRam(server);\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100*used/max).toFixed(2)}%)`)\\n    }\\n}\",\"filename\":\"/bitburner-scripts-master/opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitburner-scripts-master/opened_servers.js\",\"url\":\"blob:file:///56fc904f-4f23-426b-89a7-8a85078ff33e\"}],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"cb62a5da60ce56dcc8e89a4261710b8f67054b43ba3172d9e28bcbceeba5cc18\",\"moduleSequenceNumber\":198}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([['help', false]]);\\n    const hostname = args._[0];\\n    if(args.help || !hostname) {\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n            await ns.weaken(hostname);\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n            await ns.grow(hostname);\\n        } else {\\n            await ns.hack(hostname);\\n        }\\n    }\\n}\",\"filename\":\"/bitburner-scripts-master/basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"2f6df990f2d72047671b485857c0359683e14380024d1134638621c572466d8f\",\"moduleSequenceNumber\":199}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = ns.args[0];\\n    if (args.help || !server) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    const ram = ns.getServerRam(server);\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\",\"filename\":\"/bitburner-scripts-master/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitburner-scripts-master/analyze_server.js\",\"url\":\"blob:file:///00b4e893-99f9-4349-9f82-18005acf5f2b\"}],\"ramUsage\":5.35,\"server\":\"home\",\"_hash\":\"87103c060efdd68347d0731b5f6331004e8e06e15e1f343697f212023a2fd2c1\",\"moduleSequenceNumber\":200}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    \\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    while (true) {\\n        try {\\n            const headers = []\\n            const values = [];\\n            // Add script income per second\\n            headers.push(\\\"ScrInc\\\");\\n            values.push(ns.getScriptIncome()[0].toPrecision(5) + '/sec');\\n            // Add script exp gain rate per second\\n            headers.push(\\\"ScrExp\\\");\\n            values.push(ns.getScriptExpGain().toPrecision(5) + '/sec');\\n            // TODO: Add more neat stuff\\n\\n            // Now drop it into the placeholder elements\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        } catch (err) { // This might come in handy later\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"/bitburner-scripts-master/custom-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":26.8,\"server\":\"home\",\"_hash\":\"355088725a97bc9b6482e9f7aca9e68a611fb711ab745fd8f779c302466e8e43\",\"moduleSequenceNumber\":201}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help || args._.length < 2) {\\n\\t\\tns.tprint(\\\"This script deploys another script on a server with maximum threads possible.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} HOST SCRIPT ARGUMENTS`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles basic_hack.js foodnstuff`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst host = args._[0];\\n\\tconst script = args._[1];\\n\\tconst script_args = args._.slice(2);\\n\\n\\tif (!ns.serverExists(host)) {\\n\\t\\tns.tprint(`Server '${host}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\tif (!ns.ls(ns.getHostname()).find(f => f === script)) {\\n\\t\\tns.tprint(`Script '${script}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(script));\\n\\tns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\n\\tawait ns.scp(script, ns.getHostname(), host);\\n\\tns.exec(script, host, threads, ...script_args);\\n}\",\"filename\":\"/bitburner-scripts-master/deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.05,\"server\":\"home\",\"_hash\":\"306e804711c384f38cdc1c6ae9dfc049394484d5758f25a4b3af4db84fc4ef92\",\"moduleSequenceNumber\":202}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    let servers = list_servers(ns);\\n    const boughtServers = ns.getPurchasedServers(ns);\\n    servers = servers.filter(s => !boughtServers.includes(s));\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\n    if(!hostname) {\\n        ns.tprint(\\\"No coding contract found.\\\");\\n        return;\\n    }\\n\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\n}\",\"filename\":\"/bitburner-scripts-master/find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitburner-scripts-master/find_coding_contract.js\",\"url\":\"blob:file:///898a8505-2a2f-4c5c-83d0-f1d3e33a7644\"}],\"ramUsage\":4.25,\"server\":\"home\",\"_hash\":\"60f71098e4f2ae9f5a01cd3b08d175affba09b8937787c8a148ca8c8d24cbe1c\",\"moduleSequenceNumber\":203}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child == target) {\\n            route.unshift(child);\\n            route.unshift(server);\\n            return true;\\n        }\\n\\n        if (recursiveScan(ns, server, child, target, route)) {\\n            route.unshift(server);\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    let route = [];\\n    let server = args._[0];\\n    if (!server || args.help) {\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n\\n    recursiveScan(ns, '', 'home', server, route);\\n    for (const i in route) {\\n        await ns.sleep(500);\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"/bitburner-scripts-master/find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitburner-scripts-master/find_server.js\",\"url\":\"blob:file:///d0913274-773c-4d40-9b88-931a588e8cdd\"}],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"96b133bf421500c251c35689632a3c28482dd3d295d9855513696b92672aae25\",\"moduleSequenceNumber\":204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags._.length === 0 || flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    while (true) {\\n        const server = flags._[0];\\n        let money = ns.getServerMoneyAvailable(server);\\n        if (money === 0) money = 1;\\n        const maxMoney = ns.getServerMaxMoney(server);\\n        const minSec = ns.getServerMinSecurityLevel(server);\\n        const sec = ns.getServerSecurityLevel(server);\\n        ns.clearLog(server);\\n        ns.print(`${server}:`);\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)`);\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`);\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"/bitburner-scripts-master/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.15,\"server\":\"home\",\"_hash\":\"d6a46d28ed1cd91ed5432247f91640193ed3b15197aeded65255c05b287b7cba\",\"moduleSequenceNumber\":205}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { disableLog } from \\\"./functions.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    disableLog(ns);\\n\\n    let ram = 8;\\n    const serverLimit = ns.getPurchasedServerLimit();\\n    const allowMaxCost = ns.getServerMoneyAvailable(\\\"home\\\") / serverLimit;\\n    const maxRam = ns.getPurchasedServerMaxRam();\\n    for (let checkRam = 8; checkRam <= maxRam; checkRam *= 2) {\\n        if (allowMaxCost > ns.getPurchasedServerCost(checkRam)) {\\n            ram = checkRam;\\n        }\\n    }\\n\\n    for (const hostname of ns.getPurchasedServers()) {\\n        if (ns.getServerMaxRam(hostname) < ram) {\\n            // less then target mem, delete\\n            ns.killall(hostname);\\n            ns.deleteServer(hostname);\\n        }\\n    }\\n\\n    const cost = ns.getPurchasedServerCost(ram);\\n    while (ns.getPurchasedServers().length < serverLimit) {\\n        // Check if we have enough money to purchase a server\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n            // If we have enough money\\n            ns.purchaseServer(\\\"pserv\\\", ram);\\n        } else {\\n            ns.print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + ns.getServerMoneyAvailable(\\\"home\\\"));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"purchase-server.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"functions.js\",\"url\":\"blob:file:///f2be4a71-b372-4767-9274-fe58f88a467c\"},{\"filename\":\"purchase-server.ns\",\"url\":\"blob:file:///70f65a18-8db8-4747-aa3a-f77a6527f7b6\"}],\"ramUsage\":9.35,\"server\":\"home\",\"_hash\":\"a068d6d8aea568fd263961445ba1bcc6f8fcae577a3b945f48d99b702e9f5043\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { copyAndRun, disableLog, listServers } from \\\"./functions.js\\\";\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    disableLog(ns);\\r\\n\\r\\n    const hostServers = listServers(ns, {\\r\\n        includeHome: true,\\r\\n        hasRootAccess: true,\\r\\n    });\\r\\n\\r\\n    const targetServers = listServers(ns, {\\r\\n        hasRootAccess: true,\\r\\n        enoughHackingLevel: true,\\r\\n        hasMoney: true,\\r\\n        highestProduction: 25,\\r\\n    });\\r\\n\\r\\n    for (const hostname of hostServers) {\\r\\n        const saveRam = hostname == \\\"home\\\" ? 128 : 0;\\r\\n        await setupHackScripts(ns, hostname, saveRam, ...targetServers);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {NS} ns\\r\\n * @param {string} hostname\\r\\n * @param {number} save\\r\\n * @param {Array<string>} targetServers\\r\\n **/\\r\\nexport async function setupHackScripts(ns, hostname, save = 0, ...targetServers) {\\r\\n    const scripts = {\\r\\n        \\\"/Summertime/hackloop.js\\\": 1,\\r\\n        \\\"/Summertime/secloop.js\\\": 2,\\r\\n        \\\"/Summertime/growloop.js\\\": 10,\\r\\n    };\\r\\n    const sumPart = Object.values(scripts).reduce((acc, cur) => acc + cur, 0);\\r\\n\\r\\n    if (ns.getServerMaxRam(hostname) < 8) {\\r\\n        await copyAndRun(ns, \\\"early-hack-template.ns\\\", hostname, save, 1, ...targetServers);\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (ns.scriptRunning(\\\"early-hack-template.ns\\\", hostname)) {\\r\\n        ns.scriptKill(\\\"early-hack-template.ns\\\", hostname);\\r\\n    }\\r\\n    if (ns.scriptRunning(\\\"/Summertime/hackloop.js\\\", hostname) && !ns.isRunning(\\\"/Summertime/hackloop.js\\\", hostname, ...targetServers)) {\\r\\n        for (const script of Object.keys(scripts)) {\\r\\n            ns.scriptKill(script, hostname);\\r\\n        }\\r\\n    }\\r\\n    if (targetServers.length > 0) {\\r\\n        for (const script of Object.keys(scripts)) {\\r\\n            await copyAndRun(ns, script, hostname, save - ns.getServerUsedRam(hostname), scripts[script] / sumPart, ...targetServers);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"setup-server.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"functions.js\",\"url\":\"blob:file:///3b29d905-6c8d-43bf-9f8e-3c46b21d4b44\"},{\"filename\":\"setup-server.ns\",\"url\":\"blob:file:///d8dd5b94-7569-4fd5-9cf5-c52b3957c8f1\"}],\"ramUsage\":9.05,\"server\":\"home\",\"_hash\":\"c22aab57ed400c1c9ae400f274aebdc1d783dd5b7fcdef70553072afd07e204e\",\"moduleSequenceNumber\":207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Only buy nodes up to 23. Past that its not really worth it.\\n\\tconst maxNodes = 23;\\n\\tconst useRatio = 0.01;\\n\\n\\tns.disableLog(\\\"disableLog\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\n\\tfunction myMoney() {\\n\\t\\tconst money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\n\\t\\tconst hackingSteps = [\\n\\t\\t\\t[1, 0],\\n\\t\\t\\t[51, (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") ? 5e5 : 0) + (!ns.getPlayer().tor ? 2e5 : 0)],\\n\\t\\t\\t[217, (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") ? 1.5e6 : 0 )],\\n\\t\\t\\t[355, (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") ? 5e6 : 0 )],\\n\\t\\t\\t[524, (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") ? 3e7 : 0 )],\\n\\t\\t\\t[764, (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") ? 2.5e8 : 0 )],\\n\\t\\t\\t[2500, (!ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\") ? 5e9 : 0 )],\\n\\t\\t];\\n\\n\\t\\tconst next = hackingSteps.findIndex(a => a[0] >= ns.getHackingLevel());\\n\\t\\tconst cur = next - 1;\\n\\t\\tif (next === -1 || cur === -1) {\\n\\t\\t\\treturn money * useRatio;\\n\\t\\t}\\n\\n\\t\\tconst ratio = (ns.getHackingLevel() - hackingSteps[cur][0]) / (hackingSteps[next][0] - hackingSteps[cur][0]);\\n\\t\\tconst saveMoney = (hackingSteps[next][1] - hackingSteps[cur][1]) * ratio + hackingSteps[cur][1];\\n\\t\\tns.print(`Save money: ${saveMoney}`);\\n\\n\\t\\treturn money * useRatio - saveMoney;\\n\\t}\\n\\n\\tconst actions = [\\n\\t\\t{\\n\\t\\t\\tcost: () => {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\treturn ns.getUpgradeHomeRamCost();\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\treturn Infinity;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\tif (ns.upgradeHomeRam()) {\\n\\t\\t\\t\\t\\tns.print(`[home] Upgrade 'home' ram -> ${ns.getServerMaxRam(\\\"home\\\")}GB`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tcost: () => {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\treturn ns.getUpgradeHomeCoresCost();\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\treturn Infinity;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\tif (ns.upgradeHomeCores()) {\\n\\t\\t\\t\\t\\tns.print(`[home] Upgrade 'home' cores`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tcost: () => {\\n\\t\\t\\t\\tif (ns.hacknet.numNodes() >= maxNodes) {\\n\\t\\t\\t\\t\\treturn Infinity;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn ns.hacknet.getPurchaseNodeCost();\\n\\t\\t\\t},\\n\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\tconst res = ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tns.print(\\\"Purchased hacknet Node with index \\\" + res);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t];\\n\\n\\t/**\\n\\t * @param {number} i\\n\\t */\\n\\tfunction pushNodeActions(i) {\\n\\t\\tactions.push(\\n\\t\\t\\t{\\n\\t\\t\\t\\tcost: () => ns.hacknet.getLevelUpgradeCost(i, 10),\\n\\t\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(i, 10);\\n\\t\\t\\t\\t\\tns.print(`[${i}] Upgrade hacknet node Level`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tcost: () => ns.hacknet.getRamUpgradeCost(i, 2),\\n\\t\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeRam(i, 2);\\n\\t\\t\\t\\t\\tns.print(`[${i}] Upgrade hacknet node Ram`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tcost: () => ns.hacknet.getCoreUpgradeCost(i, 1),\\n\\t\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCore(i, 1);\\n\\t\\t\\t\\t\\tns.print(`[${i}] Upgrade hacknet node Core`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t)\\n\\t}\\n\\n\\tlet currentNodes = 0;\\n\\tfunction pushNodes() {\\n\\t\\tconst n = ns.hacknet.numNodes();\\n\\t\\tfor (let i = currentNodes; i < n; i++) {\\n\\t\\t\\tpushNodeActions(i);\\n\\t\\t}\\n\\t\\tcurrentNodes = n;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tpushNodes();\\n\\t\\tactions.sort((a, b) => a.cost() - b.cost());\\n\\n\\t\\tconst cost = actions[0].cost();\\n\\t\\tif (Number.isFinite(cost)) {\\n\\t\\t\\twhile (myMoney() < cost) {\\n\\t\\t\\t\\tns.print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t\\tactions[0].upgrade();\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buy-hacknet-2.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"functions.js\",\"url\":\"blob:file:///cb5eeede-7325-4d56-a5ea-8e2c6915161e\"},{\"filename\":\"buy-hacknet-2.ns\",\"url\":\"blob:file:///af61450a-7ff6-483e-89af-cd8cb145f041\"}],\"ramUsage\":15.4,\"server\":\"home\",\"_hash\":\"e3add64603a054869004b10e240c6fb9e3b911df9ebbfec0eb5ee60f79454f4f\",\"moduleSequenceNumber\":208}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {NS} ns\\n **/\\nexport function disableLog(ns) {\\n    ns.disableLog(\\\"disableLog\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"getServerMaxMoney\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMaxRam\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"getScriptRam\\\");\\n    ns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n    ns.disableLog(\\\"getUpgradeHomeRamCost\\\");\\n    ns.disableLog(\\\"getUpgradeHomeCoresCost\\\");\\n    ns.disableLog(\\\"stock.getSymbols\\\");\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} script\\n * @param {string} hostname\\n * @param {number} save\\n * @param {number} ratio\\n **/\\nexport function getCanRunThreads(ns, script, hostname, save = 0, ratio = 1) {\\n    const scriptRam = ns.getScriptRam(script, hostname);\\n    const serverRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname) - save;\\n    let numThreads = Math.floor(serverRam / scriptRam * ratio);\\n\\n    const serverAvailableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\n    if (numThreads < 1 && scriptRam < serverAvailableRam) return 1;\\n\\n    while (numThreads * scriptRam > serverAvailableRam) {\\n        numThreads--;\\n    }\\n    return numThreads;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} script\\n * @param {string} hostname\\n * @param {number} save\\n * @param {number} ratio\\n * @param {Array<string>} script_args\\n **/\\nexport async function copyAndRun(ns, script, hostname, save = 0, ratio = 1, ...script_args) {\\n    if (ns.scriptRunning(script, hostname) && !ns.isRunning(script, hostname, ...script_args)) {\\n        ns.scriptKill(script, hostname);\\n    }\\n    if (!ns.isRunning(script, hostname, ...script_args)) {\\n        if (hostname !== \\\"home\\\") {\\n            await ns.scp(script, \\\"home\\\", hostname);\\n        }\\n        const threads = getCanRunThreads(ns, script, hostname, save, ratio);\\n        if (threads > 0) {\\n            ns.exec(script, hostname, threads, ...script_args);\\n        }\\n    }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} hostname\\n **/\\nexport function jailbreakServer(ns, hostname) {\\n    let num = ns.getServerNumPortsRequired(hostname);\\n    if (num > 0 && ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(hostname);\\n        num--;\\n    }\\n    if (num > 0 && ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(hostname);\\n        num--;\\n    }\\n    if (num > 0 && ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(hostname);\\n        num--;\\n    }\\n    if (num > 0 && ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(hostname);\\n        num--;\\n    }\\n    if (num > 0 && ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(hostname);\\n        num--;\\n    }\\n    if (num <= 0) {\\n        ns.nuke(hostname);\\n        return true;\\n    }\\n    return false;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} parent\\n * @param {string} server\\n * @param {Array<string>} list\\n **/\\nexport function scanList(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n\\n        scanList(ns, server, child, list);\\n    }\\n}\\n\\n/**\\n * @typedef ServerFilter\\n * @type {object}\\n * @property {boolean=} enoughHackingLevel\\n * @property {boolean=} withoutPurchasedServers\\n * @property {boolean=} hasRootAccess\\n * @property {boolean=} hasMoney\\n * @property {boolean=} includeHome\\n * @property {number=} highestProduction\\n * @property {number=} minRam\\n */\\n\\n/**\\n * @param {NS} ns\\n * @param {ServerFilter} filter\\n **/\\nexport function listServers(ns, filter = {}) {\\n    /** @type {Array<string>} */\\n    let list = [];\\n    scanList(ns, '', 'home', list);\\n\\n    if (filter.enoughHackingLevel) {\\n        list = list.filter((hostname) => ns.getServerRequiredHackingLevel(hostname) <= ns.getHackingLevel());\\n    }\\n\\n    if (filter.withoutPurchasedServers) {\\n        const pserv = ns.getPurchasedServers();\\n        list = list.filter((hostname) => !pserv.includes(hostname));\\n    }\\n\\n    if (filter.hasRootAccess) {\\n        list = list.filter((hostname) => ns.hasRootAccess(hostname) || jailbreakServer(ns, hostname));\\n    }\\n\\n    if (filter.hasMoney) {\\n        list = list.filter((hostname) => ns.getServerMaxMoney(hostname) > 0);\\n    }\\n\\n    if (filter.minRam && filter.minRam > 0) {\\n        list = list.filter((hostname) => ns.getServerMaxRam(hostname) >= (filter.minRam || 0));\\n    }\\n\\n    if (filter.highestProduction && filter.highestProduction > 0 && list.length > filter.highestProduction) {\\n        /** @type {[string, number][]} */\\n        const serverMoney = list.map((hostname) => [hostname, ns.getServerMaxMoney(hostname)]);\\n        const highestProduction = serverMoney\\n            .sort((a, b) => b[1] - a[1])\\n            .slice(0, filter.highestProduction)\\n            .map(a => a[0]);\\n        list = list.filter((hostname) => highestProduction.includes(hostname));\\n    }\\n\\n    if (filter.includeHome) {\\n        list.unshift(\\\"home\\\");\\n    }\\n\\n    return list;\\n}\\n\\n/**\\n * @template T\\n * @param {T[]} array\\n **/\\nexport function shuffleArray(array) {\\n    for (let i = array.length - 1; i > 0; i--) {\\n        const j = Math.floor(Math.random() * (i + 1));\\n        [array[i], array[j]] = [array[j], array[i]];\\n    }\\n    return array\\n}\\n\\n/**\\n * @template T\\n * @param {T[]} array\\n * @param {number} perChunk\\n **/\\nexport function chunkArray(array, perChunk) {\\n    /** @type {T[][]} */\\n    const resultArray = [];\\n    return array.reduce((resultArray, item, index) => {\\n        const chunkIndex = Math.floor(index / perChunk);\\n\\n        if (!resultArray[chunkIndex]) {\\n            resultArray[chunkIndex] = []; // start a new chunk\\n        }\\n\\n        resultArray[chunkIndex].push(item);\\n\\n        return resultArray;\\n    }, resultArray);\\n}\",\"filename\":\"functions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":9.05,\"server\":\"home\",\"_hash\":\"b1e34bdb288cf004aa2ae8f0839625afd281c9ecebcfe0ef3c56655d2c28491a\",\"moduleSequenceNumber\":209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const target = \\\"n00dles\\\";\\r\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n    ns.nuke(target);\\r\\n\\r\\n    await ns.hack(target);\\r\\n    await ns.weaken(target);\\r\\n    await ns.grow(target);\\r\\n    await ns.weaken(target);\\r\\n    await ns.hack(target);\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"n00dles.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"n00dles.ns\",\"url\":\"blob:file:///a00b8dbe-30f6-418d-90a2-d40bce20facc\"}],\"ramUsage\":2.45,\"server\":\"home\",\"_hash\":\"e9e03d970d1714a863ad1d6d9f05ee07e79f842791b86519b693c9f3e79be870\",\"moduleSequenceNumber\":210}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    await ns.installBackdoor();\\r\\n}\",\"filename\":\"install-backdoor.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.6,\"server\":\"home\",\"_hash\":\"be441fe28a3a9d6a52f92b1fa40400ea734c632df09af4f0546f3375f3cce74c\",\"moduleSequenceNumber\":211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { disableLog, listServers } from \\\"./functions.js\\\";\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    disableLog(ns);\\r\\n    let args = ns.flags([\\r\\n        ['all', false],\\r\\n        ['user', false],\\r\\n        ['sort', \\\"hack\\\"],\\r\\n        ['desc', false],\\r\\n    ]);\\r\\n\\r\\n    const servers = listServers(ns, {\\r\\n        withoutPurchasedServers: !args.user,\\r\\n        includeHome: args.user,\\r\\n        hasRootAccess: !args.all,\\r\\n    }).sort((a, b) => {\\r\\n        // default sort by hacking level\\r\\n        let key = [ns.getServerRequiredHackingLevel(a), ns.getServerRequiredHackingLevel(b)];\\r\\n        if (args.sort === \\\"port\\\") {\\r\\n            key = [ns.getServerNumPortsRequired(a), ns.getServerNumPortsRequired(b)];\\r\\n        }\\r\\n        else if (args.sort === \\\"ram\\\") {\\r\\n            key = [ns.getServerMaxRam(a), ns.getServerMaxRam(b)];\\r\\n        }\\r\\n        else if (args.sort === \\\"money\\\") {\\r\\n            key = [ns.getServerMaxMoney(a), ns.getServerMaxMoney(b)];\\r\\n        }\\r\\n        if (args.desc) {\\r\\n            return key[1] - key[0];\\r\\n        }\\r\\n        return key[0] - key[1];\\r\\n    });\\r\\n    const maxServerNameLength = Math.max(...servers.map(s => s.length));\\r\\n\\r\\n    for (const server of servers) {\\r\\n        const rooted = ns.hasRootAccess(server);\\r\\n        const hackingLevel = ns.getServerRequiredHackingLevel(server);\\r\\n        const ports = ns.getServerNumPortsRequired(server);\\r\\n        const ram = ns.getServerMaxRam(server) * 1e9;\\r\\n        const money = ns.getServerMoneyAvailable(server);\\r\\n        const maxMoney = ns.getServerMaxMoney(server);\\r\\n\\r\\n        let str = `[${server.padEnd(maxServerNameLength)}]${rooted ? \\\"#\\\" : \\\" \\\"} Hack: ${`${hackingLevel}`.padStart(4)}, Port: ${ports}`;\\r\\n        if (ram > 0) {\\r\\n            str += `, RAM: ${ns.nFormat(ram, \\\"0b\\\").padStart(5)}`;\\r\\n        } else {\\r\\n            str += `, RAM:   ---`;\\r\\n        }\\r\\n        if (maxMoney > 0) {\\r\\n            str += `, Max Money: ${ns.nFormat(maxMoney, \\\"$0.000a\\\").padStart(9)} (${(money / maxMoney * 100).toFixed(2).padStart(6)}%)`;\\r\\n        }\\r\\n        ns.tprint(str);\\r\\n    }\\r\\n}\",\"filename\":\"list-servers.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"functions.js\",\"url\":\"blob:file:///6350f9a6-076e-475f-9e98-d3c6a198fa1b\"},{\"filename\":\"list-servers.ns\",\"url\":\"blob:file:///0039fa38-c0eb-4d41-aee9-726538c5746e\"}],\"ramUsage\":5,\"server\":\"home\",\"_hash\":\"74436310b8ff3c538c6e7de9336b568fdc9e837a1fac4bcf77549ca1140f4dbf\",\"moduleSequenceNumber\":212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\n    /*\\n    ns.hacknet-auto.script for Bitburner v0.47.2\\n    Winners don't use copyright\\n    \\n    Latest version of this script should be at\\n        https://github.com/iuriguilherme/netscripts.d\\n    Bitburner should be at https://github.com/danielyxie/bitburner\\n    \\n    This script requires 5.70 GB of RAM to run for 1 thread(s)\\n    \\n    This script will buy a ns.hacknet Node, fully upgrade it and then buy the next\\n    one in an infinite loop. If the cost of the next upgrade is higher than \\n    buying a new ns.hacknet Node, then a new one will be bought before the last one\\n    is upgraded. There is an option to set the budget limit.\\n*/\\n\\n    // We will not buy anything if there's less money than this ammount\\n    var reserveMoney = 25000000;\\n    // Number of times to upgrade (shouldn't have to change this)\\n    var n = 1;\\n\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n\\n    // Buy first ns.hacknetNode if there are none\\n    if (\\n        ns.hacknet.numNodes() === 0 &&\\n        ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney\\n    ) {\\n        ns.hacknet.purchaseNode();\\n        ns.print(\\n            \\\"Purchased \\\" +\\n            ns.hacknet.getNodeStats((ns.hacknet.numNodes() - 1)).name +\\n            \\\" because there was none.\\\"\\n        );\\n    }\\n\\n    // If there are no ns.hacknet Nodes, we can't do anything, so the script ends.\\n    while (ns.hacknet.numNodes() > 0) {\\n        // If there is not enough money, we wait for it instead of ending the loop.\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney) {\\n            for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n                while (\\n                    ns.hacknet.getLevelUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeLevel(i, n)\\n                ) {\\n                    ns.print(\\n                        \\\"Upgraded \\\" +\\n                        ns.hacknet.getNodeStats(i).name +\\n                        \\\" to level \\\" +\\n                        ns.hacknet.getNodeStats(i).level\\n                    );\\n                    await ns.sleep(100);\\n                }\\n                while (\\n                    ns.hacknet.getRamUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeRam(i, n)\\n                ) {\\n                    ns.print(\\n                        \\\"Upgraded \\\" +\\n                        ns.hacknet.getNodeStats(i).name +\\n                        \\\" RAM to \\\" +\\n                        ns.hacknet.getNodeStats(i).ram\\n                    );\\n                    await ns.sleep(100);\\n                }\\n                while (\\n                    ns.hacknet.getCoreUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeCore(i, n)\\n                ) {\\n                    ns.print(\\n                        \\\"Upgraded \\\" +\\n                        ns.hacknet.getNodeStats(i).name +\\n                        \\\" core to \\\" +\\n                        ns.hacknet.getNodeStats(i).cores\\n                    );\\n                    await ns.sleep(100);\\n                }\\n            } // END for (i = 0; i < ns.hacknet.numNodes(); i++)\\n            /*\\n                Buy next ns.hacknet Node if the last one is already fully upgraded.\\n                If for some reason the last ns.hacknet Node is fully upgraded and the\\n                others don't, the loop above will still attempt to upgrade them all.\\n            */\\n            if (\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity\\n            ) {\\n                // Only buy nodes up to 23. Past that its not really worth it.\\n                if (ns.hacknet.numNodes() < 23) {\\n                    ns.hacknet.purchaseNode();\\n\\n                    ns.print(\\n                        \\\"Purchased \\\" +\\n                        ns.hacknet.getNodeStats((ns.hacknet.numNodes() - 1)).name +\\n                        \\\" because the last one couldn't be upgraded further.\\\"\\n                    );\\n                }\\n            } else if (\\n                /*\\n                Or buy the next ns.hacknet Node if the next upgrade is more expensive\\n                than buying a new ns.hacknet Node.\\n                */\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost()\\n            ) {\\n                ns.hacknet.purchaseNode();\\n                ns.print(\\n                    \\\"Purchased \\\" +\\n                    ns.hacknet.getNodeStats((ns.hacknet.numNodes() - 1)).name +\\n                    \\\" because it was cheaper than next upgrade for the last one.\\\"\\n                );\\n            }\\n            await ns.sleep(100);\\n        }\\n        await ns.sleep(100);\\n    }\\n};\",\"filename\":\"/quonic/hacknet-auto.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/quonic/hacknet-auto.js\",\"url\":\"blob:file:///85e7e922-9325-4171-b680-8ca7b6067c22\"}],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"d8075d156141f93752075b76d53f3ceedb5d0b62492d0ac9f9a549958744f5fe\",\"moduleSequenceNumber\":213}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function allhosts(ns) {\\n\\tlet hosts = ['home'];\\n\\tfor (const host of hosts)\\n\\t\\tfor (const newhost of ns.scan(host))\\n\\t\\t\\tif (!hosts.includes(newhost))\\n\\t\\t\\t\\thosts.push(newhost)\\n\\treturn hosts\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst player = ns.getPlayer()\\n\\tconst targets = allhosts(ns)\\n\\t\\t.slice(1)\\n\\t\\t.map(h => ns.getServer(h))\\n\\t\\t.filter(s => s.hasAdminRights)\\n\\t\\t.filter(s => s.requiredHackingSkill <= player.hacking)\\n\\tns.scriptKill('growloop.js', 'home')\\n\\tns.scriptKill('secloop.js', 'home')\\n\\tlet X = 0\\n\\twhile (X++ < 8) {\\n\\t\\tns.exec('growloop.js', 'home', 4, '--name', X, ...targets.map(h => h.hostname))\\n\\t\\tns.exec('secloop.js', 'home', 4, '--name', X, ...targets.map(h => h.hostname))\\n\\t}\\n}\",\"filename\":\"/Summertime/init.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.6,\"server\":\"home\",\"_hash\":\"1b0811b8424574373aa62582b005828cc6fa976868400c7375d46d6c344d6562\",\"moduleSequenceNumber\":214}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.grow(host)\\n}\",\"filename\":\"/Summertime/growloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/growloop.js\",\"url\":\"blob:file:///3d69c414-d8da-4a78-8336-a9654d17e963\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"89ef895cbf5d1c2a19450b31e498f6cc45d6b6a3b01654002ef5df7ab9dcfa62\",\"moduleSequenceNumber\":215}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function allhosts(ns) {\\n\\tlet hosts = ['home'];\\n\\tfor (const host of hosts)\\n\\t\\tfor (const newhost of ns.scan(host))\\n\\t\\t\\tif (!hosts.includes(newhost))\\n\\t\\t\\t\\thosts.push(newhost)\\n\\treturn hosts\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst player = ns.getPlayer()\\n\\tconst hosts = allhosts(ns)\\n\\tfor (const host of hosts) {\\n\\t\\tns.scriptKill('hackloop.js', host)\\n\\t}\\n\\tconst servers = hosts.map(h => ns.getServer(h))\\n\\n\\n\\tconst sources = servers.slice(1).filter(s => s.hasAdminRights)\\n\\tconst targets = sources.filter(s => s.requiredHackingSkill <= player.hacking)\\n\\n\\tfor (const source of sources) {\\n\\t\\tawait ns.scp('hackloop.js', 'home', source.hostname)\\n\\t\\tconst freeRam = source.maxRam - source.ramUsed;\\n\\t\\tconst neededRam = ns.getScriptRam('hackloop.js', source.hostname)\\n\\t\\tconst threads = Math.floor(freeRam / neededRam)\\n\\t\\tif (threads > 0)\\n\\t\\t\\tns.exec('hackloop.js', source.hostname, threads, ...targets.map(s => s.hostname))\\n\\t}\\n}\",\"filename\":\"/Summertime/occupy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.3,\"server\":\"home\",\"_hash\":\"34d115d139f6f2556226906b9f9c34b0705febba00ce88622fe75d1320d43f97\",\"moduleSequenceNumber\":216}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function allhosts(ns) {\\n\\tlet hosts = ['home'];\\n\\tfor (const host of hosts)\\n\\t\\tfor (const newhost of ns.scan(host))\\n\\t\\t\\tif (!hosts.includes(newhost))\\n\\t\\t\\t\\thosts.push(newhost)\\n\\treturn hosts\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst openers = {\\n\\t\\tftp: ns.fileExists('FTPCrack.exe', 'home'),\\n\\t\\thttp: ns.fileExists('HTTPWorm.exe', 'home'),\\n\\t\\tsmtp: ns.fileExists('relaySMTP.exe', 'home'),\\n\\t\\tsql: ns.fileExists('SQLInject.exe', 'home'),\\n\\t\\tssh: ns.fileExists('BruteSSH.exe', 'home'),\\n\\t}\\n\\tconst numOpenPorts = Object.values(openers).reduce((a, b) => a + b)\\n\\tconst rootable = allhosts(ns)\\n\\t\\t.slice(1)\\n\\t\\t.map(h => ns.getServer(h))\\n\\t\\t.filter(s => !s.hasAdminRights)\\n\\t\\t.filter(s => s.numOpenPortsRequired <= numOpenPorts)\\n\\n\\tfor (const server of rootable) {\\n\\t\\tif (openers.ftp)\\n\\t\\t\\tns.ftpcrack(server.hostname)\\n\\t\\tif (openers.http)\\n\\t\\t\\tns.httpworm(server.hostname)\\n\\t\\tif (openers.smtp)\\n\\t\\t\\tns.relaysmtp(server.hostname)\\n\\t\\tif (openers.sql)\\n\\t\\t\\tns.sqlinject(server.hostname)\\n\\t\\tif (openers.ssh)\\n\\t\\t\\tns.brutessh(server.hostname)\\n\\t\\tns.nuke(server.hostname)\\n\\t}\\n}\",\"filename\":\"/Summertime/rootall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.2,\"server\":\"home\",\"_hash\":\"ee82bf4971bd7820e88135958e2b6577d139cd6e8fd3d71b9423b4f06f50db95\",\"moduleSequenceNumber\":217}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\n\\tfor (let i = array.length - 1; i > 0; i--) {\\n\\t\\tconst j = Math.floor(Math.random() * (i + 1));\\n\\t\\t[array[i], array[j]] = [array[j], array[i]];\\n\\t}\\n\\treturn array\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['name', ''],\\n\\t])\\n\\tlet hosts = args._.slice(0)\\n\\tif (hosts.length === 0)\\n\\t\\tns.exit()\\n\\tshuffleArray(hosts)\\n\\twhile (true)\\n\\t\\tfor (const host of hosts)\\n\\t\\t\\tawait ns.weaken(host)\\n}\",\"filename\":\"/Summertime/secloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/secloop.js\",\"url\":\"blob:file:///19aa0d80-cf83-4dde-afe1-2b51299672c6\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"678d1c1528217c9d0d162dab983c0dfa1933e633f6ada2f3e134b0248618d665\",\"moduleSequenceNumber\":218}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child == target) {\\n            route.unshift(child);\\n            route.unshift(server);\\n            return true;\\n        }\\n\\n        if (recursiveScan(ns, server, child, target, route)) {\\n            route.unshift(server);\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    let route = [];\\n    let server = args._[0];\\n    if (!server || args.help) {\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n\\n    recursiveScan(ns, '', 'home', server, route);\\n    for (let i = 0; i < route.length; i++) {\\n        // await ns.sleep(500);\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}${ns.hasRootAccess(route[i]) ? \\\" (rooted)\\\" : \\\"\\\"}`);\\n    }\\n    ns.tprint(route.map(serv => serv == \\\"home\\\" ? \\\"home;\\\" : `connect ${serv};`).join(\\\" \\\"));\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"find_server.js\",\"url\":\"blob:file:///90f43f9f-114e-4621-9488-a961a6471ec5\"}],\"ramUsage\":1.85,\"server\":\"home\",\"_hash\":\"6788ee301fdfaa9c91223e6254e85a28b97d3b6cb50c4c2dd4184110ee51a047\",\"moduleSequenceNumber\":219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function shuffleArray(array) {\\r\\n    for (let i = array.length - 1; i > 0; i--) {\\r\\n        const j = Math.floor(Math.random() * (i + 1));\\r\\n        [array[i], array[j]] = [array[j], array[i]];\\r\\n    }\\r\\n    return array\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let args = ns.flags([\\r\\n        ['name', ''],\\r\\n    ])\\r\\n    let hosts = args._.slice(0)\\r\\n    if (hosts.length === 0)\\r\\n        ns.exit()\\r\\n    shuffleArray(hosts)\\r\\n    while (true)\\r\\n        for (const host of hosts)\\r\\n            await ns.hack(host)\\r\\n}\",\"filename\":\"/Summertime/hackloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Summertime/hackloop.js\",\"url\":\"blob:file:///dc4eaa2c-247f-4d32-80cb-6ec017f9b0ab\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"d0657196498ab4c5e0e5b1ed1b7f81e3bd6b2e405888b9c551d75ab7822df474\",\"moduleSequenceNumber\":220}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Stock market bot for bitburner, written by steamid/Meng- https://danielyxie.github.io/bitburner/ - [github.io] \\r\\n// Runs infinitely - buys and sells stock, hopefully for a profit...\\r\\n// version 1.21 - Added check for max stocks, cleaned things up a bit, cycle complete prints less frequently\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.print(\\\"Starting script here\\\");\\r\\n    ns.disableLog('sleep');\\r\\n    ns.disableLog('getServerMoneyAvailable');\\r\\n\\r\\n    let stockSymbols = ns.stock.getSymbols(); // all symbols\\r\\n    let portfolio = []; // init portfolio\\r\\n    let cycle = 0;\\r\\n    // ~~~~~~~You can edit these~~~~~~~~\\r\\n    const forecastThresh = 0.65; // Buy above this confidence level (forecast%)\\r\\n    const minimumCash = 50000000; // Minimum cash to keep\\r\\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n    ns.print(\\\"Starting run - Do we own any stocks?\\\"); //Finds and adds any stocks we already own\\r\\n    for (const stock of stockSymbols) {\\r\\n        let pos = ns.stock.getPosition(stock);\\r\\n        if (pos[0] > 0) {\\r\\n            portfolio.push({ sym: stock, value: pos[1], shares: pos[0] })\\r\\n            ns.print('Detected: ' + stock + ' quant: ' + pos[0] + ' @ ' + pos[1]);\\r\\n        };\\r\\n    };\\r\\n\\r\\n    while (true) {\\r\\n        for (const stock of stockSymbols) { // for each stock symbol\\r\\n            if (portfolio.findIndex(obj => obj.sym === stock) !== -1) { //if we already have this stock\\r\\n                let i = portfolio.findIndex(obj => obj.sym === stock); // log index of symbol as i\\r\\n                if (ns.stock.getAskPrice(stock) >= portfolio[i].value * 1.1) { // if the price is higher than what we bought it at +10% then we SELL\\r\\n                    sellStock(stock);\\r\\n                }\\r\\n                else if (ns.stock.getForecast(stock) < 0.4) {\\r\\n                    sellStock(stock);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            else if (ns.stock.getForecast(stock) >= forecastThresh) { // if the forecast is better than threshold and we don't own then BUY\\r\\n                buyStock(stock);\\r\\n            }\\r\\n        } // end of for loop (iterating stockSymbols)\\r\\n        cycle++;\\r\\n        if (cycle % 5 === 0) { ns.print('Cycle ' + cycle + ' Complete') };\\r\\n        await ns.sleep(6000);\\r\\n    } // end of while true loop\\r\\n\\r\\n    function buyStock(stock) {\\r\\n        let stockPrice = ns.stock.getAskPrice(stock); // Get the stockprice\\r\\n        let shares = stockBuyQuantCalc(stockPrice, stock); // calculate the shares to buy using StockBuyQuantCalc\\r\\n\\r\\n        if (ns.stock.getVolatility(stock) <= 0.05) { // if volatility is < 5%, buy the stock\\r\\n            ns.stock.buy(stock, shares);\\r\\n            ns.print('Bought: ' + stock + ' quant: ' + Math.round(shares) + ' @ ' + Math.round(stockPrice));\\r\\n\\r\\n            portfolio.push({ sym: stock, value: stockPrice, shares: shares }); //store the purchase info in portfolio\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sellStock(stock) {\\r\\n        let position = ns.stock.getPosition(stock);\\r\\n        var forecast = ns.stock.getForecast(stock);\\r\\n        if (forecast < 0.55) {\\r\\n            let i = portfolio.findIndex(obj => obj.sym === stock); //Find the stock info in the portfolio\\r\\n            ns.print('SOLD: ' + stock + 'quant: ' + portfolio[i].shares + '@ ' + portfolio[i].value);\\r\\n            portfolio.splice(i, 1); // Remove the stock from portfolio\\r\\n            ns.stock.sell(stock, position[0]);\\r\\n\\r\\n        }\\r\\n    };\\r\\n\\r\\n    function stockBuyQuantCalc(stockPrice, stock) { // Calculates how many shares to buy\\r\\n        let playerMoney = ns.getServerMoneyAvailable('home') - minimumCash;\\r\\n        let maxSpend = playerMoney * 0.25;\\r\\n        let calcShares = maxSpend / stockPrice;\\r\\n        let maxShares = ns.stock.getMaxShares(stock);\\r\\n\\r\\n        if (calcShares > maxShares) {\\r\\n            return maxShares\\r\\n        }\\r\\n        else { return calcShares }\\r\\n    }\\r\\n}\",\"filename\":\"/steamsplay.com/stockbot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":19.7,\"server\":\"home\",\"_hash\":\"572fbe622d14ffface45656b43753c35aecb4d6abfcf1b183ecf6c88ee0d2630\",\"moduleSequenceNumber\":221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Stock market bot for bitburner, written by steamid/Meng- https://danielyxie.github.io/bitburner/ - [github.io]\\r\\n// Runs infinitely - buys and sells stock, hopefully for a profit...\\r\\n// version 1.21 - Added check for max stocks, cleaned things up a bit, cycle complete prints less frequently\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    ns.print(\\\"Starting script here\\\");\\r\\n    ns.disableLog('sleep');\\r\\n    ns.disableLog('getServerMoneyAvailable');\\r\\n\\r\\n    let stockSymbols = ns.stock.getSymbols(); // all symbols\\r\\n    let portfolio = []; // init portfolio\\r\\n    let cycle = 0;\\r\\n    // ~~~~~~~You can edit these~~~~~~~~\\r\\n    const forecastThresh = 0.65; // Buy above this confidence level (forecast%)\\r\\n    const minimumCash = 50000000; // Minimum cash to keep\\r\\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n    ns.print(\\\"Starting run - Do we own any stocks?\\\"); //Finds and adds any stocks we already own\\r\\n    for (const stock of stockSymbols) {\\r\\n        let pos = ns.stock.getPosition(stock);\\r\\n        if (pos[0] > 0) {\\r\\n            portfolio.push({ sym: stock, value: pos[1], shares: pos[0] })\\r\\n            ns.print('Detected: ' + stock + ' quant: ' + pos[0] + ' @ ' + pos[1]);\\r\\n        };\\r\\n    };\\r\\n\\r\\n    while (true) {\\r\\n        for (const stock of stockSymbols) { // for each stock symbol\\r\\n            if (portfolio.findIndex(obj => obj.sym === stock) !== -1) { //if we already have this stock\\r\\n                let i = portfolio.findIndex(obj => obj.sym === stock); // log index of symbol as i\\r\\n                if (ns.stock.getAskPrice(stock) >= portfolio[i].value * 1.1) { // if the price is higher than what we bought it at +10% then we SELL\\r\\n                    sellStock(stock);\\r\\n                }\\r\\n                else if (ns.stock.getForecast(stock) < 0.45) {\\r\\n                    sellStock(stock);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            else if (ns.stock.getForecast(stock) >= forecastThresh) { // if the forecast is better than threshold and we don't own then BUY\\r\\n                buyStock(stock);\\r\\n            }\\r\\n        } // end of for loop (iterating stockSymbols)\\r\\n        cycle++;\\r\\n        if (cycle % 5 === 0) { ns.print('Cycle ' + cycle + ' Complete') };\\r\\n        await ns.sleep(6000);\\r\\n    } // end of while true loop\\r\\n\\r\\n    function buyStock(stock) {\\r\\n        let stockPrice = ns.stock.getAskPrice(stock); // Get the stockprice\\r\\n        let shares = stockBuyQuantCalc(stockPrice, stock); // calculate the shares to buy using StockBuyQuantCalc\\r\\n\\r\\n        if (shares > 0 && ns.stock.getVolatility(stock) <= 0.05) { // if volatility is < 5%, buy the stock\\r\\n            ns.stock.buy(stock, shares);\\r\\n            ns.print('Bought: ' + stock + ' quant: ' + Math.round(shares) + ' @ ' + Math.round(stockPrice));\\r\\n\\r\\n            portfolio.push({ sym: stock, value: stockPrice, shares: shares }); //store the purchase info in portfolio\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sellStock(stock) {\\r\\n        let position = ns.stock.getPosition(stock);\\r\\n        var forecast = ns.stock.getForecast(stock);\\r\\n        if (forecast < 0.55) {\\r\\n            let i = portfolio.findIndex(obj => obj.sym === stock); //Find the stock info in the portfolio\\r\\n            ns.print('SOLD: ' + stock + 'quant: ' + portfolio[i].shares + '@ ' + portfolio[i].value);\\r\\n            portfolio.splice(i, 1); // Remove the stock from portfolio\\r\\n            ns.stock.sell(stock, position[0]);\\r\\n\\r\\n        }\\r\\n    };\\r\\n\\r\\n    function stockBuyQuantCalc(stockPrice, stock) { // Calculates how many shares to buy\\r\\n        let playerMoney = ns.getServerMoneyAvailable('home') - minimumCash;\\r\\n        let maxSpend = playerMoney * 0.25;\\r\\n        let calcShares = maxSpend / stockPrice;\\r\\n        let maxShares = ns.stock.getMaxShares(stock);\\r\\n\\r\\n        if (calcShares > maxShares) {\\r\\n            return maxShares\\r\\n        }\\r\\n        else { return calcShares }\\r\\n    }\\r\\n}\",\"filename\":\"/steamsplay/stockbot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/steamsplay/stockbot.js\",\"url\":\"blob:file:///950f7d16-d80d-4608-b64d-9dda0e047a98\"}],\"ramUsage\":19.7,\"server\":\"home\",\"_hash\":\"25a230d6ebf2eb263f8160047da4d74ff5c913d173d0e74b60ac5c9186734174\",\"moduleSequenceNumber\":222}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns**/\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"ALL\\\"); //Visual clarity\\r\\n\\r\\n    //Welcome to the Auto Farm part 2: Electric Boogaloo\\r\\n    //This script is a little more complicated to explain easily, it dedicates high RAM servers to attack high profit servers\\r\\n    //This is also set and forget, your EXEs and hacking level are reacquired each second, so new servers are added without needing to reboot it\\r\\n    //Well I hope this brings you ideas, knowledge and or profits :D\\r\\n\\r\\n    var files = [\\\"weak.script\\\", \\\"grow.script\\\", \\\"hack.script\\\"];//No touching, unless you understand everything here\\r\\n    await ns.write(files[0], \\\"weaken(args)\\\", \\\"w\\\"); await ns.write(files[1], \\\"grow(args)\\\", \\\"w\\\"); await ns.write(files[2], \\\"hack(args)\\\", \\\"w\\\");\\r\\n\\r\\n    var serverList; var targetList; var hostList; var exes; var temp; var manager = false;\\r\\n    var cycle = [0, \\\"─\\\", \\\"\\\\\\\\\\\", \\\"|\\\", \\\"/\\\"]; var latest = [[\\\"-\\\", \\\"-\\\"], [\\\"-\\\", \\\"-\\\"], [\\\"-\\\", \\\"-\\\"]];\\r\\n    if (false) { brutessh(); ftpcrack(); relaysmtp(); httpworm(); sqlinject() } //Avoid RAM cost bypass error\\r\\n\\r\\n    var pServers = true;//await ns.prompt(\\\"Use player servers as hosts?\\\");\\r\\n\\r\\n    async function scanExes() {\\r\\n        exes = [\\\"BruteSSH\\\", \\\"FTPCrack\\\", \\\"relaySMTP\\\", \\\"SQLInject\\\", \\\"HTTPWorm\\\"];\\r\\n        for (let i = 0; i <= exes.length - 1; i++) { if (!ns.fileExists(exes[i] + \\\".exe\\\", \\\"home\\\")) { exes.splice(i, 1); i-- } }//Removes EXEs you don't have\\r\\n    }\\r\\n\\r\\n    function arraySort(array) { return array.sort(function (a, b) { return b[0] - a[0] }) }//Sorts nested arrays\\r\\n    function logBalance(server) {//For balance in display\\r\\n        return [ns.nFormat(ns.getServerMoneyAvailable(server), '0a')] + \\\" / \\\" + [ns.nFormat(ns.getServerMaxMoney(server), '0a')]\\r\\n            + \\\" : \\\" + ns.nFormat(ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server), '0%')\\r\\n    }\\r\\n\\r\\n    async function log() {//The display\\r\\n        if (cycle[0] >= 4) { cycle[0] = 0 }; cycle[0]++;//Speen\\r\\n        ns.clearLog();\\r\\n        ns.print(\\\"╔═══╦═╣ HOST ╠════════════════╣ TARGET ╠═╗\\\");\\r\\n        ns.print(\\\"║ G ║ \\\" + latest[0][0] + latest[0][1].padStart(34 - latest[0][0].length) + \\\" ║\\\")\\r\\n        ns.print(\\\"║ W ║ \\\" + latest[1][0] + latest[1][1].padStart(34 - latest[1][0].length) + \\\" ║\\\")\\r\\n        ns.print(\\\"║ H ║ \\\" + latest[2][0] + latest[2][1].padStart(34 - latest[2][0].length) + \\\" ║\\\")\\r\\n        ns.print(\\\"║ \\\" + cycle[cycle[0]] + \\\" ╠════════════════════════════════════╣\\\")\\r\\n        if (targetList.length < 6) { ns.print(\\\"╚═══╝ ║\\\") } else {\\r\\n            ns.print(\\\"╠═══╝ Priority Servers Balance           ║\\\")\\r\\n            for (let i = 0; i < 6; i++) {\\r\\n                temp = targetList[i][1];\\r\\n                ns.print(\\\"║ > \\\" + temp + logBalance(temp).padStart(36 - temp.length) + \\\" ║\\\")\\r\\n            }\\r\\n            ns.print(\\\"╠════════════════════════════════════════╝\\\")\\r\\n            ns.print(\\\"║ EXE \\\" + exes.length + \\\"/5 ║ HOSTS \\\" + hostList.length + \\\" ║ TARGETS \\\" + targetList.length)\\r\\n            ns.print(\\\"╠════════════════════════════════════════╗\\\")\\r\\n            if (manager) {\\r\\n                ns.print(\\\"╠══════╣ Managing \\\" + ns.hacknet.numNodes() + \\\" HNet Nodes ╠\\\".padEnd(21, \\\"═\\\") + \\\"╣\\\")\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async function scanServers() {//Finds all servers\\r\\n        serverList = ns.scan(\\\"home\\\"); let serverCount = [serverList.length, 0]; let depth = 0; let checked = 0; let scanIndex = 0;\\r\\n        while (scanIndex <= serverCount[depth] - 1) {\\r\\n            let results = ns.scan(serverList[checked]); checked++;\\r\\n            for (let i = 0; i <= results.length - 1; i++) {\\r\\n                if (results[i] != \\\"home\\\" && !serverList.includes(results[i])) {\\r\\n                    serverList.push(results[i]); serverCount[depth + 1]++\\r\\n                }\\r\\n            }\\r\\n            if (scanIndex == serverCount[depth] - 1) { scanIndex = 0; depth++; serverCount.push(0) } else { scanIndex++ };\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async function checkServers() {//Sorts servers into lists based on RAM and money/hack time ratio: hostList and targetList\\r\\n        targetList = []; hostList = [[ns.getServerMaxRam(\\\"home\\\"), \\\"home\\\"]];\\r\\n        if (pServers) {//Adds in player servers\\r\\n            temp = ns.getPurchasedServers();\\r\\n            for (let i = 0; i < temp.length; i++) {\\r\\n                hostList.push([ns.getServerMaxRam(temp[i]), temp[i]])\\r\\n                await ns.scp(files, \\\"home\\\", temp[i]);\\r\\n            }\\r\\n        }\\r\\n        for (let i = 0; i <= serverList.length - 1; i++) {\\r\\n            let cTarget = serverList[i];\\r\\n            // if (ns.getServerMoneyAvailable(cTarget) > 0 || ns.getServerMaxRam(cTarget) > 2) {//Filters out servers like darkweb\\r\\n                if (ns.getServerNumPortsRequired(cTarget) <= exes.length) {\\r\\n                    for (let i = 0; i <= exes.length - 1; i++) { ns[exes[i].toLowerCase()](cTarget) }//Runs all EXEs you have\\r\\n                    ns.nuke(cTarget);//Ghandi.jpeg\\r\\n                    temp = [Math.floor(ns.getServerMaxMoney(cTarget) / ns.getServerMinSecurityLevel(cTarget)), cTarget];\\r\\n                    if (ns.getServerMoneyAvailable(cTarget) != 0 && !targetList.includes(temp) && ns.getServerRequiredHackingLevel(cTarget) <= ns.getHackingLevel()) {\\r\\n                        targetList.push(temp); targetList = arraySort(targetList);\\r\\n                    }\\r\\n                    temp = [ns.getServerMaxRam(cTarget), cTarget];\\r\\n                    if (ns.getServerMaxRam(cTarget) > 2 && !hostList.includes(cTarget)) {\\r\\n                        hostList.push(temp); hostList = arraySort(hostList)\\r\\n                    }\\r\\n                    await ns.scp(files, \\\"home\\\", cTarget);\\r\\n                }\\r\\n            // }\\r\\n            await ns.asleep(20);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    async function hackAll() {//Dedicates high RAM servers to attack high profit per second servers\\r\\n        let tarIndex = 0; let loop = false;\\r\\n        for (let i = 0; i <= hostList.length - 1; i++) {\\r\\n            if (tarIndex > targetList.length - 1) { tarIndex = 0; loop = true };\\r\\n            let hHost = hostList[i][1]; let hTarget = targetList[tarIndex][1]; let freeRam;\\r\\n            if (hHost == \\\"home\\\") { freeRam = Math.max(ns.getServerMaxRam(hHost) - ns.getServerUsedRam(hHost) - 50, 0) } else {\\r\\n                freeRam = ns.getServerMaxRam(hHost) - ns.getServerUsedRam(hHost)\\r\\n            }\\r\\n            if (freeRam >= 4) {\\r\\n                let threads = Math.floor(freeRam / 1.75); let bThreads = 0;\\r\\n                if (ns.getServerMoneyAvailable(hTarget) < ns.getServerMaxMoney(hTarget) * .70 || loop) {//Server money target here\\r\\n                    latest[0][0] = hHost; latest[0][1] = hTarget;\\r\\n                    if (threads > 2) {\\r\\n                        ns.exec(\\\"weak.script\\\", hHost, Math.ceil(0.08 * threads), hTarget);\\r\\n                        ns.exec(\\\"grow.script\\\", hHost, Math.floor(0.92 * threads), hTarget);\\r\\n                    } else { ns.exec(\\\"grow.script\\\", hHost, threads, hTarget) }\\r\\n                } else if (ns.getServerSecurityLevel(hTarget) > ns.getServerMinSecurityLevel(hTarget) + 5) {//Security target here\\r\\n                    latest[1][0] = hHost; latest[1][1] = hTarget;\\r\\n                    ns.exec(\\\"weak.script\\\", hHost, threads, hTarget);\\r\\n                } else {\\r\\n                    while (parseFloat(ns.hackAnalyze(hTarget)) * threads > .4) { threads--; bThreads++ }//Hack limit here\\r\\n                    latest[2][0] = hHost; latest[2][1] = hTarget;\\r\\n                    ns.exec(\\\"hack.script\\\", hHost, threads, hTarget);\\r\\n                    if (bThreads > 0) { ns.exec(\\\"weak.script\\\", hHost, bThreads, hTarget) }\\r\\n                }\\r\\n            }\\r\\n            tarIndex++;\\r\\n            await ns.asleep(20);\\r\\n        }\\r\\n    }\\r\\n    //Put modules below here\\r\\n    // manager = await ns.prompt(\\\"Activate Hacknet Manager?\\\");\\r\\n    // async function hnManager() {\\r\\n    //     let mode = [\\\"Level\\\", \\\"Ram\\\", \\\"Core\\\"]\\r\\n    //     function check(q) { return eval(q < ns.getPlayer().money / 5) }\\r\\n    //     if (check(ns.hacknet.getPurchaseNodeCost())) {\\r\\n    //         ns.hacknet.purchaseNode();\\r\\n    //     }\\r\\n    //     for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\r\\n    //         for (let n = 0; n < 3; n++) {\\r\\n    //             if (check(ns.hacknet[\\\"get\\\" + mode[n] + \\\"UpgradeCost\\\"](i))) {\\r\\n    //                 ns.hacknet[\\\"upgrade\\\" + mode[n]](i);\\r\\n    //             }\\r\\n    //         }\\r\\n    //     }\\r\\n    // }\\r\\n    //But above here\\r\\n    ns.tail()\\r\\n    while (true) {//Keeps everything running once per second\\r\\n        try {\\r\\n            await scanExes()\\r\\n            await scanServers()\\r\\n            await checkServers()\\r\\n            await hackAll()\\r\\n            if (manager) { await hnManager() }\\r\\n            await log()\\r\\n        } catch (error) {\\r\\n            ns.print(`Error:`);\\r\\n            ns.print(error);\\r\\n        }\\r\\n        await ns.asleep(1000)\\r\\n    }\\r\\n}\",\"filename\":\"/steamsplay/auto_farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/steamsplay/auto_farm.js\",\"url\":\"blob:file:///f8beb120-0526-497f-a4d4-9e24836b3a93\"}],\"ramUsage\":12.1,\"server\":\"home\",\"_hash\":\"16bf168cdd2453765867a424c08aa3f9eced7105486ec080a8c0f31a96fc3c3c\",\"moduleSequenceNumber\":223}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":224}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":225}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":226}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { disableLog } from \\\"./functions.js\\\";\\r\\n\\r\\n/**\\r\\n * @typedef ScriptDefine\\r\\n * @property {string} server\\r\\n * @property {string | string[]} script\\r\\n * @property {number=} minMoney\\r\\n * @property {number=} minHackingLevel\\r\\n * @property {[n: number, lvl: number]=} hasSourceFile\\r\\n * @property {(ns: NS)=>boolean=} condition\\r\\n */\\r\\n\\r\\n/** @type {ScriptDefine[]} */\\r\\nconst runScripts = [\\r\\n    {\\r\\n        server: \\\"foodnstuff\\\",\\r\\n        script: \\\"n00dles.ns\\\",\\r\\n    },\\r\\n    // {\\r\\n    //     server: \\\"home\\\",\\r\\n    //     script: \\\"setup-server.ns\\\",\\r\\n    // },\\r\\n    {\\r\\n        server: \\\"sigma-cosmetics\\\",\\r\\n        script: \\\"buy-hacknet-2.ns\\\",\\r\\n    },\\r\\n    {\\r\\n        server: \\\"foodnstuff\\\",\\r\\n        script: \\\"/steamsplay/auto_farm.js\\\",\\r\\n    },\\r\\n    {\\r\\n        server: \\\"home\\\",\\r\\n        script: \\\"purchase-server.ns\\\",\\r\\n        minMoney: 11000000,\\r\\n    },\\r\\n    {\\r\\n        server: \\\"home\\\",\\r\\n        script: \\\"/steamsplay/stockbot.js\\\",\\r\\n        minMoney: 50000000,\\r\\n        condition: (ns) => {\\r\\n            try {\\r\\n                ns.stock.getSymbols();\\r\\n                return true;\\r\\n            } catch (error) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n    },\\r\\n    {\\r\\n        server: \\\"home\\\",\\r\\n        script: \\\"/source-files/SF4-1/purchase-tor.ns\\\",\\r\\n        minMoney: 200000,\\r\\n        hasSourceFile: [4, 1],\\r\\n    },\\r\\n    {\\r\\n        server: \\\"home\\\",\\r\\n        script: \\\"/source-files/SF4-1/install-backdoor.ns\\\",\\r\\n        minHackingLevel: 51,\\r\\n        hasSourceFile: [4, 1],\\r\\n    },\\r\\n];\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    disableLog(ns);\\r\\n\\r\\n    while (true) {\\r\\n        for (const sc of runScripts) {\\r\\n            if (sc.minMoney && sc.minMoney > 0 && ns.getServerMoneyAvailable('home') < sc.minMoney) continue;\\r\\n            if (sc.minHackingLevel && sc.minHackingLevel > 0 && ns.getHackingLevel() < sc.minHackingLevel) continue;\\r\\n            if (sc.hasSourceFile && !hasSourceFile(ns, sc.hasSourceFile)) continue;\\r\\n            if (sc.condition && !sc.condition(ns)) continue;\\r\\n\\r\\n            const targetScript = typeof sc.script === \\\"string\\\" ? sc.script : sc.script[0];\\r\\n\\r\\n            if (!ns.isRunning(targetScript, sc.server)) {\\r\\n                if (sc.server !== \\\"home\\\") {\\r\\n                    ns.nuke(sc.server);\\r\\n                    await ns.scp(sc.script, \\\"home\\\", sc.server);\\r\\n                }\\r\\n                ns.exec(targetScript, sc.server);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        await ns.sleep(60 * 1000);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\r\\n * @param {NS} ns\\r\\n * @param {[number, number]} sourceFile \\r\\n */\\r\\nfunction hasSourceFile(ns, sourceFile) {\\r\\n    const owned = ns.getOwnedSourceFiles();\\r\\n    return !!owned.find((s) => s.n === sourceFile[0] && s.lvl >= sourceFile[1]);\\r\\n}\\r\\n\\r\\n/*\\r\\n// buy TOR Router: 200k\\r\\nbuy -l;\\r\\nbuy BruteSSH.exe;\\r\\nbuy DeepscanV1.exe;\\r\\nbuy ServerProfiler.exe;\\r\\nbuy AutoLink.exe;\\r\\nbuy FTPCrack.exe;\\r\\nbuy relaySMTP.exe;\\r\\nbuy DeepscanV2.exe;\\r\\nbuy HTTPWorm.exe;\\r\\nbuy SQLInject.exe;\\r\\nbuy Formulas.exe;\\r\\nbuy -l;\\r\\n\\r\\nhome; run find_server.js CSEC;\\r\\nbackdoor; // !!! CyberSec\\r\\n\\r\\nhome; run find_server.js avmnite-02h;\\r\\nbackdoor; // !!! NiteSec\\r\\n\\r\\nhome; run find_server.js I.I.I.I;\\r\\nbackdoor; // !!! The Black Hand\\r\\n\\r\\nhome; run find_server.js run4theh111z;\\r\\nbackdoor; // !!! BitRunners\\r\\n\\r\\nhome; run find_server.js fulcrumassets;\\r\\nbackdoor; // !!! Fulcrum Secret Technologies\\r\\n\\r\\nhome; run find_server.js w0r1d_d43m0n;\\r\\nbackdoor; // !!!\\r\\n\\r\\n*/\",\"filename\":\"init-system.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"functions.js\",\"url\":\"blob:file:///f2be4a71-b372-4767-9274-fe58f88a467c\"},{\"filename\":\"init-system.ns\",\"url\":\"blob:file:///a1ccc973-1822-490f-86aa-a74b9fe2e68b\"}],\"ramUsage\":10.8,\"server\":\"home\",\"_hash\":\"fc0da4a3b9a3cce56d775b0ce224df9a63081cdd2f5fbb162693bf2c0eac39d8\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// https://www.reddit.com/r/Bitburner/comments/a3oxvm/a_very_simple_stock_market_script/\\r\\n\\r\\n//Requires access to the TIX API\\r\\n//Requires access to SF8:L2 to be able to short stocks\\r\\n\\r\\nconst flipThresh = 0.5 / 100; //i.e. flip on retracement of 0.5%\\r\\nconst reBuyThresh = 2 / 100; //i.e. rebuy short positions on move of 2%\\r\\nconst commission = 100000;\\r\\n\\r\\nfunction refresh(ns, stocks, myStocks) {\\r\\n    for (const sym in stocks) {\\r\\n        let s = stocks[sym];\\r\\n        s.shares = ns.getStockPosition(s.sym)[0];\\r\\n        s.sharesShort = ns.getStockPosition(s.sym)[2];\\r\\n        if ((s.shares + s.sharesShort) > 0) {\\r\\n            let x = myStocks[s.sym];\\r\\n            if (x === undefined) {\\r\\n                x = { sym: s.sym };\\r\\n                x.maxPrice = 0;\\r\\n                x.minPrice = 1e25;\\r\\n                myStocks[s.sym] = x;\\r\\n            }\\r\\n            x.shares = s.shares;\\r\\n            x.sharesShort = s.sharesShort;\\r\\n            x.price = ns.getStockPrice(x.sym);\\r\\n            if (x.minPrice > x.price) x.minPrice = x.price;\\r\\n            if (x.maxPrice < x.price) x.maxPrice = x.price;\\r\\n        }\\r\\n        else\\r\\n            delete myStocks[s.sym];\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction flipLtoS(ns, x) {\\r\\n    ns.print(`Flipping ${x.sym} to Short`);\\r\\n    ns.sellStock(x.sym, x.shares);\\r\\n    x.minPrice = x.price;\\r\\n    let numShares = Math.floor((ns.getServerMoneyAvailable(\\\"home\\\") - commission) / x.price);\\r\\n    ns.shortStock(x.sym, numShares);\\r\\n}\\r\\n\\r\\nfunction flipStoL(ns, x) {\\r\\n    ns.print(`Flipping ${x.sym} to Long`);\\r\\n    ns.sellShort(x.sym, x.sharesShort);\\r\\n    x.maxPrice = x.price;\\r\\n    let numShares = Math.floor((ns.getServerMoneyAvailable(\\\"home\\\") - commission) / x.price);\\r\\n    ns.buyStock(x.sym, numShares);\\r\\n}\\r\\n\\r\\nfunction rebuyShort(ns, x) {\\r\\n    ns.print(`Rebuying short position for ${x.sym}`);\\r\\n    ns.sellShort(x.sym, x.sharesShort);\\r\\n    x.maxPrice = x.price;\\r\\n    let numShares = Math.floor((ns.getServerMoneyAvailable(\\\"home\\\") - commission) / x.price);\\r\\n    ns.shortStock(x.sym, numShares);\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    let stocks = {};\\r\\n    let myStocks = {};\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n\\r\\n    for (const symbol of ns.getStockSymbols())\\r\\n        stocks[symbol] = { sym: symbol };\\r\\n\\r\\n    while (true) {\\r\\n        refresh(ns, stocks, myStocks);\\r\\n\\r\\n        for (const sym in myStocks) {\\r\\n            let x = myStocks[sym];\\r\\n            if ((x.shares > 0) && (x.price < ((1 - flipThresh) * x.maxPrice)))\\r\\n                flipLtoS(ns, x);\\r\\n            if ((x.sharesShort > 0) && (x.price > ((1 + flipThresh) * x.minPrice)))\\r\\n                flipStoL(ns, x);\\r\\n            else if ((x.sharesShort > 0) && (x.price < ((1 - flipThresh) * x.maxPrice)))\\r\\n                rebuyShort(ns, x);\\r\\n        }\\r\\n\\r\\n        await ns.sleep(6 * 1000);\\r\\n    }\\r\\n}\",\"filename\":\"/stock/havoc_mayhem/stock-helper.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.2,\"server\":\"home\",\"_hash\":\"b54dd7110eed02cbd8997c1a19b3766c94ce8526f5d41ea06d2487dd2323b318\",\"moduleSequenceNumber\":228}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// https://www.reddit.com/r/Bitburner/comments/qvqwkw/help_with_stock_market_script/hl1jc84/?context=3\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.disableLog(\\\"stock.buy\\\");\\r\\n    ns.disableLog(\\\"stock.sell\\\");\\r\\n    while (true) {\\r\\n        tendStocks(ns);\\r\\n        await ns.sleep(1 * 60 * 1000);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction tendStocks(ns) {\\r\\n    const allStocks = getAllStocks(ns);\\r\\n\\r\\n    // select stocks with <51% chance to increase price\\r\\n    const stocksToSell = getBearStocks(allStocks, 0.51);\\r\\n    // sell all those stocks\\r\\n    sellStocks(ns, stocksToSell);\\r\\n\\r\\n    // select stocks with >55% chance to increase price\\r\\n    const stocksToBuy = getBullStocks(allStocks, 0.55);\\r\\n    // buy the highest-rated stocks available\\r\\n    buyStocks(ns, stocksToBuy);\\r\\n\\r\\n    // keep a log of net worth change over time\\r\\n    const portfolioValue = getPortfolioValue(allStocks);\\r\\n    const cashValue = ns.getPlayer().money;\\r\\n    const totalValue = portfolioValue + cashValue;\\r\\n    ns.print(`Net worth: ${ns.nFormat(totalValue, \\\"$0.000a\\\")} = ${ns.nFormat(portfolioValue, \\\"$0.0a\\\")} stocks + ${ns.nFormat(cashValue, \\\"$0.0a\\\")} cash`);\\r\\n}\\r\\n\\r\\nfunction getAllStocks(ns) {\\r\\n    // make a lookup table of all stocks and all their properties\\r\\n    const stockSymbols = ns.stock.getSymbols();\\r\\n    const stocks = {};\\r\\n    for (const symbol of stockSymbols) {\\r\\n\\r\\n        const pos = ns.stock.getPosition(symbol);\\r\\n        const stock = {\\r\\n            symbol: symbol,\\r\\n            forecast: ns.stock.getForecast(symbol),\\r\\n            volatility: ns.stock.getVolatility(symbol),\\r\\n            askPrice: ns.stock.getAskPrice(symbol),\\r\\n            bidPrice: ns.stock.getBidPrice(symbol),\\r\\n            maxShares: ns.stock.getMaxShares(symbol),\\r\\n            shares: pos[0],\\r\\n            sharesAvgPrice: pos[1],\\r\\n            sharesShort: pos[2],\\r\\n            sharesAvgPriceShort: pos[3]\\r\\n        };\\r\\n        stock.summary = `${stock.symbol}: ${stock.forecast.toFixed(3)} ± ${stock.volatility.toFixed(3)}`;\\r\\n        stocks[symbol] = stock;\\r\\n    }\\r\\n    return stocks;\\r\\n}\\r\\n\\r\\nfunction getPortfolioValue(stocks) {\\r\\n    let value = 0;\\r\\n    for (const stock of Object.values(stocks)) {\\r\\n        value += stock.bidPrice * stock.shares - stock.askPrice * stock.sharesShort;\\r\\n    }\\r\\n    return value;\\r\\n}\\r\\n\\r\\nfunction getBullStocks(stocks, threshold = 0.55) {\\r\\n    // select stocks with at least threshold % chance to increase each cycle\\r\\n    const bullStocks = [];\\r\\n    for (const stock of Object.values(stocks)) {\\r\\n        if (stock.forecast - stock.volatility > threshold) {\\r\\n            bullStocks.push(stock);\\r\\n        }\\r\\n    }\\r\\n    return bullStocks;\\r\\n}\\r\\n\\r\\nfunction getBearStocks(stocks, threshold = 0.48) {\\r\\n    // select stocks with at most threshold % chance to increase each cycle\\r\\n    const bearStocks = [];\\r\\n    for (const stock of Object.values(stocks)) {\\r\\n        if (stock.forecast - stock.volatility < threshold) {\\r\\n            bearStocks.push(stock);\\r\\n        }\\r\\n    }\\r\\n    return bearStocks;\\r\\n}\\r\\n\\r\\nfunction sellStocks(ns, stocksToSell) {\\r\\n    for (const stock of stocksToSell) {\\r\\n        if (stock.shares > 0) {\\r\\n            const salePrice = ns.stock.sell(stock.symbol, stock.shares);\\r\\n            if (salePrice != 0) {\\r\\n                const saleTotal = salePrice * stock.shares;\\r\\n                const saleCost = stock.sharesAvgPrice * stock.shares;\\r\\n                const saleProfit = saleTotal - saleCost;\\r\\n                stock.shares = 0;\\r\\n                ns.print(`Sold ${stock.summary} stock for ${ns.nFormat(saleProfit, \\\"$0.0a\\\")} profit`);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction buyStocks(ns, stocksToBuy, maxTransactions = 4) {\\r\\n    // buy stocks, spending more money on higher rated stocks\\r\\n    const bestStocks = stocksToBuy.sort((a, b) => {\\r\\n        return b.forecast - a.forecast; // descending\\r\\n    });\\r\\n\\r\\n    let transactions = 0;\\r\\n    for (const stock of bestStocks) {\\r\\n        const moneyRemaining = ns.getPlayer().money;\\r\\n        // don't spend the last 5 million bux\\r\\n        if (moneyRemaining < 5000000 || transactions >= maxTransactions) {\\r\\n            return;\\r\\n        }\\r\\n        // spend up to half the money available on the highest rated stock\\r\\n        // (the following stock will buy half as much)\\r\\n        const moneyThisStock = moneyRemaining / 2 - 100000;\\r\\n        let numShares = moneyThisStock / stock.askPrice;\\r\\n\\r\\n        numShares = Math.min(numShares, stock.maxShares - stock.shares - stock.sharesShort);\\r\\n        const boughtPrice = ns.stock.buy(stock.symbol, numShares);\\r\\n        if (boughtPrice != 0) {\\r\\n            const boughtTotal = boughtPrice * numShares;\\r\\n            transactions += 1;\\r\\n            stock.shares += numShares;\\r\\n            ns.print(`Bought ${ns.nFormat(boughtTotal, \\\"$0.0a\\\")} of ${stock.summary}`);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/stock/myhf/stock-trader.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":22.1,\"server\":\"home\",\"_hash\":\"ab61c31ea370cbd783350d7fd22dac60e7bb45e1fc52c620cd4cc8df8983bd60\",\"moduleSequenceNumber\":229}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// https://www.reddit.com/r/Bitburner/comments/rn7l84/stock_script_to_end_your_financial_problems/\\r\\n\\r\\n// Built upon u/pwillia7 's stock script.\\r\\n// u/ferrus_aub stock script using simple portfolio algorithm.\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    var maxSharePer = 1.00\\r\\n    var stockBuyPer = 0.60\\r\\n    var stockVolPer = 0.05\\r\\n    var moneyKeep = 1000000000\\r\\n    var minSharePer = 5\\r\\n\\r\\n    while (true) {\\r\\n        ns.disableLog('disableLog');\\r\\n        ns.disableLog('sleep');\\r\\n        ns.disableLog('getServerMoneyAvailable');\\r\\n        var stocks = ns.stock.getSymbols()\\r\\n        for (const stock of stocks) {\\r\\n            var position = ns.stock.getPosition(stock);\\r\\n            if (position[0]) {\\r\\n                //ns.print('Position: ' + stock + ', ')\\r\\n                sellPositions(stock);\\r\\n            }\\r\\n            buyPositions(stock);\\r\\n        }\\r\\n        ns.print('Cycle Complete');\\r\\n        await ns.sleep(6000);\\r\\n    }\\r\\n    function buyPositions(stock) {\\r\\n        var maxShares = (ns.stock.getMaxShares(stock) * maxSharePer) - position[0];\\r\\n        var askPrice = ns.stock.getAskPrice(stock);\\r\\n        var forecast = ns.stock.getForecast(stock);\\r\\n        var volPer = ns.stock.getVolatility(stock);\\r\\n        var playerMoney = ns.getServerMoneyAvailable('home');\\r\\n\\r\\n        if (forecast >= stockBuyPer && volPer <= stockVolPer) {\\r\\n            if (playerMoney - moneyKeep > ns.stock.getPurchaseCost(stock, minSharePer, \\\"Long\\\")) {\\r\\n                var shares = Math.min((playerMoney - moneyKeep - 100000) / askPrice, maxShares);\\r\\n                ns.stock.buy(stock, shares);\\r\\n                //ns.print('Bought: '+ stock + '')\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function sellPositions(stock) {\\r\\n        var forecast = ns.stock.getForecast(stock);\\r\\n        if (forecast < 0.5) {\\r\\n            ns.stock.sell(stock, position[0]);\\r\\n            //ns.print('Sold: '+ stock + '')\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/stock/ferrus_aub/stock.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stock/ferrus_aub/stock.ns\",\"url\":\"blob:file:///0b2a1e03-bb60-4da9-bc53-3fb233ec5b3e\"}],\"ramUsage\":21.7,\"server\":\"home\",\"_hash\":\"f828c7f73a0614f77a337e38e0778b06737ba03fab6d742e4fb75e233702eeaf\",\"moduleSequenceNumber\":230}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    if (!ns.getPlayer().tor) {\\r\\n        ns.purchaseTor();\\r\\n    }\\r\\n    if (ns.getPlayer().tor) {\\r\\n        const programs = [\\r\\n            \\\"BruteSSH.exe\\\",\\r\\n            \\\"FTPCrack.exe\\\",\\r\\n            \\\"relaySMTP.exe\\\",\\r\\n            \\\"HTTPWorm.exe\\\",\\r\\n            \\\"SQLInject.exe\\\",\\r\\n            // \\\"AutoLink.exe\\\",\\r\\n            // \\\"DeepscanV1.exe\\\",\\r\\n            // \\\"DeepscanV2.exe\\\",\\r\\n            // \\\"ServerProfiler.exe\\\",\\r\\n            // \\\"Formulas.exe\\\",\\r\\n        ];\\r\\n        for (const program of programs) {\\r\\n            if (!ns.fileExists(program, \\\"home\\\")) {\\r\\n                ns.purchaseProgram(program);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/source-files/SF4-1/purchase-tor.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/source-files/SF4-1/purchase-tor.ns\",\"url\":\"blob:file:///1b5e7bfe-65d5-4d72-ad3d-54cb4dbad79c\"}],\"ramUsage\":6.2,\"server\":\"home\",\"_hash\":\"89e797bfd40cfcbc0b75d56d3d0279664ba0cfd1189ffa01e3847d06f523f4a7\",\"moduleSequenceNumber\":231}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { disableLog, listServers } from \\\"../../functions.js\\\";\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    disableLog(ns);\\r\\n\\r\\n    const installed = [];\\r\\n\\r\\n    while (true) {\\r\\n        const allServers = listServers(ns, {\\r\\n            enoughHackingLevel: true,\\r\\n            hasRootAccess: true,\\r\\n        });\\r\\n\\r\\n        for (const hostname of allServers) {\\r\\n            if (installed.includes(hostname)) continue;\\r\\n\\r\\n            try {\\r\\n                if (!connectTo(ns, hostname)) continue;\\r\\n                await ns.installBackdoor();\\r\\n                connectTo(ns, \\\"home\\\");\\r\\n                installed.push(hostname);\\r\\n            } catch (error) {\\r\\n            }\\r\\n        }\\r\\n\\r\\n        await ns.sleep(10 * 1000);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} target\\r\\n **/\\r\\nfunction connectTo(ns, target) {\\r\\n    /** @type {string[]} */\\r\\n    const route = [];\\r\\n    recursiveScan(ns, '', ns.getCurrentServer(), target, route);\\r\\n    for (let i = 1; i < route.length; i++) {\\r\\n        const server = route[i];\\r\\n        if (!ns.connect(server)) {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} parent\\r\\n * @param {string} server\\r\\n * @param {string} target\\r\\n * @param {string[]} route\\r\\n **/\\r\\nfunction recursiveScan(ns, parent, server, target, route) {\\r\\n    const children = ns.scan(server);\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue;\\r\\n        }\\r\\n        if (child == target) {\\r\\n            route.unshift(child);\\r\\n            route.unshift(server);\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if (recursiveScan(ns, server, child, target, route)) {\\r\\n            route.unshift(server);\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    return false;\\r\\n}\",\"filename\":\"/source-files/SF4-1/install-backdoor.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"2b3597290b749b2776a93ebaa859c8537abce8896f4301ae835c7e2a5e305da3\",\"moduleSequenceNumber\":232}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"77.9.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":36961285177.5,\"moneyMax\":138604819415.625,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1107,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-921106.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,2,-5,9,-5,-3,5,7,9,5,9,10,-9,-3,-6,6,3,0,-5,6,2,-6,-5,-4,-5,-1],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-430210-Sector-12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"21925515242\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-557734-Aevum.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[61,102,25,139,180,53,144,3],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"80.6.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":40560101284.5,\"moneyMax\":152100379816.875,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1158,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-788434.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,3,-7,-9,-6,-4,9,-10,-7,8,10,8,0,-1,10,4,0,2,10,-1,-6,2,-9,10,-6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"18.9.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":19091701626.75,\"moneyMax\":71593881100.3125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1109,\"serverGrowth\":76}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-956888.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,5,0,1,-4,-7],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229769.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":742390706,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-650785-AlphaEnterprises.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"64044969\",-90],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"93.0.6.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":11622992401.5,\"moneyMax\":43586221505.625,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1097,\"serverGrowth\":62}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-603576-TianDiHui.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,10,4,0,2,9,0,3],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"28.7.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":26600389428,\"moneyMax\":99751460355,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1100,\"serverGrowth\":91}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"44.2.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":14338986160.5,\"moneyMax\":53771198101.875,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1159,\"serverGrowth\":56}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-495539.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"65004\",11],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"63.0.2.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":12285028875.75,\"moneyMax\":46068858284.0625,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1071,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"81.2.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":13045273716,\"moneyMax\":48919776435,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1074,\"serverGrowth\":94}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"34.7.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":19362291483,\"moneyMax\":72608593061.25,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":984,\"serverGrowth\":92}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-768412-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,1],[0,1,0,0,0,0,0,0],[0,1,1,0,0,0,0,1],[0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-61456-Sector-12.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,9],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"12.6.9.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1315316049,\"moneyMax\":4932435183.75,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1045,\"serverGrowth\":96}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"65.3.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1463,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"68.6.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":760638302.25,\"moneyMax\":2852393633.4375,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":890,\"serverGrowth\":83}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-864183.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"128524600455\",-4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"56.3.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":627050760.75,\"moneyMax\":2351440352.8125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":902,\"serverGrowth\":65}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"15.8.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":503431392.75,\"moneyMax\":1887867722.8125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":948,\"serverGrowth\":44}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"41.9.3.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":554890536.75,\"moneyMax\":2080839512.8125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":878,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"39.8.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":543054384.75,\"moneyMax\":2036453942.8125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":836,\"serverGrowth\":63}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"81.1.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":742816826.25,\"moneyMax\":2785563098.4375,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":883,\"serverGrowth\":93}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"5.4.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":840003516,\"moneyMax\":3150013185,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":817,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"82.3.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":639283947,\"moneyMax\":2397314801.25,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":851,\"serverGrowth\":60}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"90.6.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":376994553,\"moneyMax\":1413729573.75,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":865,\"serverGrowth\":73}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-769786-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[190,27,158,50,137,98,106,85,133,1,50,181,38,42,1,144,131,86,72,161,125,182,13,75,32,160,184,31,143,51,115,7,145,97,68,181,122,75,42,110],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"11.8.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":638944251.75,\"moneyMax\":2396040944.0625,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":867,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-308571.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a(())a)))aa(a)a\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-130939.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,0,7,0,8,0,0,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"65.3.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":630349106.25,\"moneyMax\":2363809148.4375,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":833,\"serverGrowth\":87}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-720871.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,4,8,0,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"12.8.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":867448823.25,\"moneyMax\":3252933087.1875,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":904,\"serverGrowth\":57}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"29.3.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":720051939.75,\"moneyMax\":2700194774.0625,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-796757-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[16,121,1,22,109,17,55,187],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-38284-Aevum.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[133,117,26,84,96,82,17,186,114,176,188,142,160,7,186,61,192,193,5,162,5,11,158,99,145,85,87,54,59,175,30,28,33,120,163,121,100,73,73,39,65,62,197,98],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"48.5.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":746196375,\"moneyMax\":2798236406.25,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":787,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-437590.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[193,15,52,134,188,49,170,87,55,196,15,175,87,60,30,156,27,141,46,165,56,20,77,107,105,41,131,185,63],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-892423.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[3,6],[18,28],[15,24],[18,19],[21,25],[1,6]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-962156.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[4,11],[11,14],[12,16]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"55.1.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":602940434.25,\"moneyMax\":2261026628.4375,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":843,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-91104.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")))a()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"20.2.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":526379826,\"moneyMax\":1973924347.5,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":765,\"serverGrowth\":72}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-735107.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,15],[13,18],[10,12],[4,13],[20,21],[3,11],[15,24],[8,9],[11,18],[14,15],[11,18],[3,8]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"99.9.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":986770494,\"moneyMax\":3700389352.5,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":830,\"serverGrowth\":70}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-362049.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a((()(a)))))\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"48.4.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1188819508.5,\"moneyMax\":4458073156.875,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":828,\"serverGrowth\":89}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"32.3.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":834341733.75,\"moneyMax\":3128781501.5625,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":825,\"serverGrowth\":84}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"25.6.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1119623962.5,\"moneyMax\":4198589859.375,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":841,\"serverGrowth\":77}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"0.0.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":824687649,\"moneyMax\":3092578683.75,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":777,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-392184.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,7,10,0,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"65.0.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":586010637.75,\"moneyMax\":2197539891.5625,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":701,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"47.0.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":1.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":871,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":233}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":234}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":235}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":456234494.25,\"moneyMax\":1710879353.4375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":493,\"serverGrowth\":45}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-837897.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[1,11],[8,16],[23,27],[17,18],[6,16],[4,10],[10,15],[13,16]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"19.3.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":532693560,\"moneyMax\":1997600850,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":508,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-477169.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[17,62,61,29,155,177,131,100,186,113,34,4,131,88,196,146,126,115,43,124,106,125,60,183,144,92,74,19,196,69,7,160,138,199,12],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"67.0.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":207876609.75,\"moneyMax\":779537286.5625,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":436,\"serverGrowth\":49}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"0.6.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":26.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":850,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":14,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.609999999999985,\"pid\":858,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":236}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":237}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":238}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"alpha-ent\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":623083238.4375,\"moneyMax\":623083238.4375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":409,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"90.3.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":679559643,\"moneyMax\":2548348661.25,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":734,\"serverGrowth\":80}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"43.7.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":26.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.80999999999996,\"pid\":824,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":14,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.40999999999994,\"pid\":833,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":239}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":240}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":241}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":50.77,\"minDifficulty\":17,\"moneyAvailable\":224632505.6800003,\"moneyMax\":713186493.75,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":465,\"serverGrowth\":54}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-66351.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((()a()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"31.5.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":399447720.75,\"moneyMax\":1497928952.8125,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":596,\"serverGrowth\":67}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"67.4.0.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":117.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"pid\":810,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":66,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":867,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":242}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":243}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":244}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":31.362000000000002,\"minDifficulty\":22,\"moneyAvailable\":871934795.75,\"moneyMax\":1276153188.75,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":427,\"serverGrowth\":28}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-849140.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[156,157,164,63,105,61,191,77,63,97,130,194,67,162,141,190,58,29,34,81,119,23,11,13,44,72,6,189,66,97,63,167,186,31,159,176,59,58]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-886788-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-5,-8,-1,8,10,7,10],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"93.3.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":26.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":856,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":15,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":245}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":246}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":247}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":14.74,\"minDifficulty\":12,\"moneyAvailable\":286490706.5625,\"moneyMax\":477478296.5625,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":311,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-696929.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"17816611955\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"82.6.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":248}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":249}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":250}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":23.56799999999999,\"minDifficulty\":18,\"moneyAvailable\":378105832.25740415,\"moneyMax\":628843980.9375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":345,\"serverGrowth\":47}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-909138-CyberSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[6,6],[1,3,4],[5,6,9,9],[5,8,8,8,7],[1,9,7,2,5,5],[7,2,6,7,4,6,8],[3,5,8,1,3,9,4,4],[2,8,2,1,1,1,6,4,7],[9,5,5,6,9,5,9,3,4,2],[5,7,6,6,6,1,8,3,3,8,2]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-870041-Sector-12.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,12],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"64.7.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":57.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000044,\"pid\":765,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":32,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.41000000000008,\"pid\":801,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":251}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":252}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":253}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":32.980000000000004,\"minDifficulty\":24,\"moneyAvailable\":773437500,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":375,\"serverGrowth\":51}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"46.4.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":254}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":255}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":256}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":16.122,\"minDifficulty\":14,\"moneyAvailable\":133003404.4375,\"moneyMax\":221638283.4375,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":259,\"serverGrowth\":65}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-267624-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-1,-10,7,-10,7,2,7,1,1,6,6,10,-2,-5,-8,5,-5],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"72.3.4.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.495,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":666.6100000000147,\"pid\":16,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":257}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":258}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":259}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.02,\"minDifficulty\":1,\"moneyAvailable\":196875,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-763272-Aevum.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[53,137,192,10,191,78,148,165,133,116,119,61,32,139,65,115,98,87,23,27,3,166,137,60,89,69,45,10,109,92,198,76,180,97,3,184],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"50.5.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[1478852,8909,2429,159]},\"filename\":\"n00dles.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1205.8905005120541,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.496,\"onlineExpGained\":15396.782400002678,\"onlineMoneyMade\":1478852,\"onlineRunningTime\":94349.0099993214,\"pid\":17,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/steamsplay/auto_farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16246734.819794279,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.5,\"onlineExpGained\":158734501.07519224,\"onlineMoneyMade\":138740980792,\"onlineRunningTime\":71689.80999947264,\"pid\":18,\"ramUsage\":12.1,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"/steamsplay/auto_farm.js\",\"url\":\"blob:file:///7593aa49-aa3c-4d33-b27c-d3098934bd2a\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns**/\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"ALL\\\"); //Visual clarity\\r\\n\\r\\n    //Welcome to the Auto Farm part 2: Electric Boogaloo\\r\\n    //This script is a little more complicated to explain easily, it dedicates high RAM servers to attack high profit servers\\r\\n    //This is also set and forget, your EXEs and hacking level are reacquired each second, so new servers are added without needing to reboot it\\r\\n    //Well I hope this brings you ideas, knowledge and or profits :D\\r\\n\\r\\n    var files = [\\\"weak.script\\\", \\\"grow.script\\\", \\\"hack.script\\\"];//No touching, unless you understand everything here\\r\\n    await ns.write(files[0], \\\"weaken(args)\\\", \\\"w\\\"); await ns.write(files[1], \\\"grow(args)\\\", \\\"w\\\"); await ns.write(files[2], \\\"hack(args)\\\", \\\"w\\\");\\r\\n\\r\\n    var serverList; var targetList; var hostList; var exes; var temp; var manager = false;\\r\\n    var cycle = [0, \\\"─\\\", \\\"\\\\\\\\\\\", \\\"|\\\", \\\"/\\\"]; var latest = [[\\\"-\\\", \\\"-\\\"], [\\\"-\\\", \\\"-\\\"], [\\\"-\\\", \\\"-\\\"]];\\r\\n    if (false) { brutessh(); ftpcrack(); relaysmtp(); httpworm(); sqlinject() } //Avoid RAM cost bypass error\\r\\n\\r\\n    var pServers = true;//await ns.prompt(\\\"Use player servers as hosts?\\\");\\r\\n\\r\\n    async function scanExes() {\\r\\n        exes = [\\\"BruteSSH\\\", \\\"FTPCrack\\\", \\\"relaySMTP\\\", \\\"SQLInject\\\", \\\"HTTPWorm\\\"];\\r\\n        for (let i = 0; i <= exes.length - 1; i++) { if (!ns.fileExists(exes[i] + \\\".exe\\\", \\\"home\\\")) { exes.splice(i, 1); i-- } }//Removes EXEs you don't have\\r\\n    }\\r\\n\\r\\n    function arraySort(array) { return array.sort(function (a, b) { return b[0] - a[0] }) }//Sorts nested arrays\\r\\n    function logBalance(server) {//For balance in display\\r\\n        return [ns.nFormat(ns.getServerMoneyAvailable(server), '0a')] + \\\" / \\\" + [ns.nFormat(ns.getServerMaxMoney(server), '0a')]\\r\\n            + \\\" : \\\" + ns.nFormat(ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server), '0%')\\r\\n    }\\r\\n\\r\\n    async function log() {//The display\\r\\n        if (cycle[0] >= 4) { cycle[0] = 0 }; cycle[0]++;//Speen\\r\\n        ns.clearLog();\\r\\n        ns.print(\\\"╔═══╦═╣ HOST ╠════════════════╣ TARGET ╠═╗\\\");\\r\\n        ns.print(\\\"║ G ║ \\\" + latest[0][0] + latest[0][1].padStart(34 - latest[0][0].length) + \\\" ║\\\")\\r\\n        ns.print(\\\"║ W ║ \\\" + latest[1][0] + latest[1][1].padStart(34 - latest[1][0].length) + \\\" ║\\\")\\r\\n        ns.print(\\\"║ H ║ \\\" + latest[2][0] + latest[2][1].padStart(34 - latest[2][0].length) + \\\" ║\\\")\\r\\n        ns.print(\\\"║ \\\" + cycle[cycle[0]] + \\\" ╠════════════════════════════════════╣\\\")\\r\\n        if (targetList.length < 6) { ns.print(\\\"╚═══╝ ║\\\") } else {\\r\\n            ns.print(\\\"╠═══╝ Priority Servers Balance           ║\\\")\\r\\n            for (let i = 0; i < 6; i++) {\\r\\n                temp = targetList[i][1];\\r\\n                ns.print(\\\"║ > \\\" + temp + logBalance(temp).padStart(36 - temp.length) + \\\" ║\\\")\\r\\n            }\\r\\n            ns.print(\\\"╠════════════════════════════════════════╝\\\")\\r\\n            ns.print(\\\"║ EXE \\\" + exes.length + \\\"/5 ║ HOSTS \\\" + hostList.length + \\\" ║ TARGETS \\\" + targetList.length)\\r\\n            ns.print(\\\"╠════════════════════════════════════════╗\\\")\\r\\n            if (manager) {\\r\\n                ns.print(\\\"╠══════╣ Managing \\\" + ns.hacknet.numNodes() + \\\" HNet Nodes ╠\\\".padEnd(21, \\\"═\\\") + \\\"╣\\\")\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async function scanServers() {//Finds all servers\\r\\n        serverList = ns.scan(\\\"home\\\"); let serverCount = [serverList.length, 0]; let depth = 0; let checked = 0; let scanIndex = 0;\\r\\n        while (scanIndex <= serverCount[depth] - 1) {\\r\\n            let results = ns.scan(serverList[checked]); checked++;\\r\\n            for (let i = 0; i <= results.length - 1; i++) {\\r\\n                if (results[i] != \\\"home\\\" && !serverList.includes(results[i])) {\\r\\n                    serverList.push(results[i]); serverCount[depth + 1]++\\r\\n                }\\r\\n            }\\r\\n            if (scanIndex == serverCount[depth] - 1) { scanIndex = 0; depth++; serverCount.push(0) } else { scanIndex++ };\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async function checkServers() {//Sorts servers into lists based on RAM and money/hack time ratio: hostList and targetList\\r\\n        targetList = []; hostList = [[ns.getServerMaxRam(\\\"home\\\"), \\\"home\\\"]];\\r\\n        if (pServers) {//Adds in player servers\\r\\n            temp = ns.getPurchasedServers();\\r\\n            for (let i = 0; i < temp.length; i++) {\\r\\n                hostList.push([ns.getServerMaxRam(temp[i]), temp[i]])\\r\\n                await ns.scp(files, \\\"home\\\", temp[i]);\\r\\n            }\\r\\n        }\\r\\n        for (let i = 0; i <= serverList.length - 1; i++) {\\r\\n            let cTarget = serverList[i];\\r\\n            // if (ns.getServerMoneyAvailable(cTarget) > 0 || ns.getServerMaxRam(cTarget) > 2) {//Filters out servers like darkweb\\r\\n                if (ns.getServerNumPortsRequired(cTarget) <= exes.length) {\\r\\n                    for (let i = 0; i <= exes.length - 1; i++) { ns[exes[i].toLowerCase()](cTarget) }//Runs all EXEs you have\\r\\n                    ns.nuke(cTarget);//Ghandi.jpeg\\r\\n                    temp = [Math.floor(ns.getServerMaxMoney(cTarget) / ns.getServerMinSecurityLevel(cTarget)), cTarget];\\r\\n                    if (ns.getServerMoneyAvailable(cTarget) != 0 && !targetList.includes(temp) && ns.getServerRequiredHackingLevel(cTarget) <= ns.getHackingLevel()) {\\r\\n                        targetList.push(temp); targetList = arraySort(targetList);\\r\\n                    }\\r\\n                    temp = [ns.getServerMaxRam(cTarget), cTarget];\\r\\n                    if (ns.getServerMaxRam(cTarget) > 2 && !hostList.includes(cTarget)) {\\r\\n                        hostList.push(temp); hostList = arraySort(hostList)\\r\\n                    }\\r\\n                    await ns.scp(files, \\\"home\\\", cTarget);\\r\\n                }\\r\\n            // }\\r\\n            await ns.asleep(20);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    async function hackAll() {//Dedicates high RAM servers to attack high profit per second servers\\r\\n        let tarIndex = 0; let loop = false;\\r\\n        for (let i = 0; i <= hostList.length - 1; i++) {\\r\\n            if (tarIndex > targetList.length - 1) { tarIndex = 0; loop = true };\\r\\n            let hHost = hostList[i][1]; let hTarget = targetList[tarIndex][1]; let freeRam;\\r\\n            if (hHost == \\\"home\\\") { freeRam = Math.max(ns.getServerMaxRam(hHost) - ns.getServerUsedRam(hHost) - 50, 0) } else {\\r\\n                freeRam = ns.getServerMaxRam(hHost) - ns.getServerUsedRam(hHost)\\r\\n            }\\r\\n            if (freeRam >= 4) {\\r\\n                let threads = Math.floor(freeRam / 1.75); let bThreads = 0;\\r\\n                if (ns.getServerMoneyAvailable(hTarget) < ns.getServerMaxMoney(hTarget) * .70 || loop) {//Server money target here\\r\\n                    latest[0][0] = hHost; latest[0][1] = hTarget;\\r\\n                    if (threads > 2) {\\r\\n                        ns.exec(\\\"weak.script\\\", hHost, Math.ceil(0.08 * threads), hTarget);\\r\\n                        ns.exec(\\\"grow.script\\\", hHost, Math.floor(0.92 * threads), hTarget);\\r\\n                    } else { ns.exec(\\\"grow.script\\\", hHost, threads, hTarget) }\\r\\n                } else if (ns.getServerSecurityLevel(hTarget) > ns.getServerMinSecurityLevel(hTarget) + 5) {//Security target here\\r\\n                    latest[1][0] = hHost; latest[1][1] = hTarget;\\r\\n                    ns.exec(\\\"weak.script\\\", hHost, threads, hTarget);\\r\\n                } else {\\r\\n                    while (parseFloat(ns.hackAnalyze(hTarget)) * threads > .4) { threads--; bThreads++ }//Hack limit here\\r\\n                    latest[2][0] = hHost; latest[2][1] = hTarget;\\r\\n                    ns.exec(\\\"hack.script\\\", hHost, threads, hTarget);\\r\\n                    if (bThreads > 0) { ns.exec(\\\"weak.script\\\", hHost, bThreads, hTarget) }\\r\\n                }\\r\\n            }\\r\\n            tarIndex++;\\r\\n            await ns.asleep(20);\\r\\n        }\\r\\n    }\\r\\n    //Put modules below here\\r\\n    // manager = await ns.prompt(\\\"Activate Hacknet Manager?\\\");\\r\\n    // async function hnManager() {\\r\\n    //     let mode = [\\\"Level\\\", \\\"Ram\\\", \\\"Core\\\"]\\r\\n    //     function check(q) { return eval(q < ns.getPlayer().money / 5) }\\r\\n    //     if (check(ns.hacknet.getPurchaseNodeCost())) {\\r\\n    //         ns.hacknet.purchaseNode();\\r\\n    //     }\\r\\n    //     for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\r\\n    //         for (let n = 0; n < 3; n++) {\\r\\n    //             if (check(ns.hacknet[\\\"get\\\" + mode[n] + \\\"UpgradeCost\\\"](i))) {\\r\\n    //                 ns.hacknet[\\\"upgrade\\\" + mode[n]](i);\\r\\n    //             }\\r\\n    //         }\\r\\n    //     }\\r\\n    // }\\r\\n    //But above here\\r\\n    ns.tail()\\r\\n    while (true) {//Keeps everything running once per second\\r\\n        try {\\r\\n            await scanExes()\\r\\n            await scanServers()\\r\\n            await checkServers()\\r\\n            await hackAll()\\r\\n            if (manager) { await hnManager() }\\r\\n            await log()\\r\\n        } catch (error) {\\r\\n            ns.print(`Error:`);\\r\\n            ns.print(error);\\r\\n        }\\r\\n        await ns.asleep(1000)\\r\\n    }\\r\\n}\",\"filename\":\"/steamsplay/auto_farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/steamsplay/auto_farm.js\",\"url\":\"blob:file:///574460e8-02ca-4580-86da-1452ead3fb84\"}],\"ramUsage\":12.1,\"server\":\"foodnstuff\",\"_hash\":\"16bf168cdd2453765867a424c08aa3f9eced7105486ec080a8c0f31a96fc3c3c\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const target = \\\"n00dles\\\";\\r\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n    ns.nuke(target);\\r\\n\\r\\n    await ns.hack(target);\\r\\n    await ns.weaken(target);\\r\\n    await ns.grow(target);\\r\\n    await ns.weaken(target);\\r\\n    await ns.hack(target);\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"n00dles.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"n00dles.ns\",\"url\":\"blob:file:///644cd257-d309-4203-8053-fb1d5a6cf75b\"}],\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"_hash\":\"e9e03d970d1714a863ad1d6d9f05ee07e79f842791b86519b693c9f3e79be870\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":5625000,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"71.5.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"buy-hacknet-2.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.505,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71689.80999947264,\"pid\":19,\"ramUsage\":15.4,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[{\"filename\":\"buy-hacknet-2.ns\",\"url\":\"blob:file:///384c6c36-9126-4e2d-b158-fe24464bf242\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":265}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":266}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":267}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Only buy nodes up to 23. Past that its not really worth it.\\n\\tconst maxNodes = 23;\\n\\tconst useRatio = 0.01;\\n\\n\\tns.disableLog(\\\"disableLog\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\n\\tfunction myMoney() {\\n\\t\\tconst money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\n\\t\\tconst hackingSteps = [\\n\\t\\t\\t[1, 0],\\n\\t\\t\\t[51, (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") ? 5e5 : 0) + (!ns.getPlayer().tor ? 2e5 : 0)],\\n\\t\\t\\t[217, (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") ? 1.5e6 : 0 )],\\n\\t\\t\\t[355, (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") ? 5e6 : 0 )],\\n\\t\\t\\t[524, (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") ? 3e7 : 0 )],\\n\\t\\t\\t[764, (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") ? 2.5e8 : 0 )],\\n\\t\\t\\t[2500, (!ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\") ? 5e9 : 0 )],\\n\\t\\t];\\n\\n\\t\\tconst next = hackingSteps.findIndex(a => a[0] >= ns.getHackingLevel());\\n\\t\\tconst cur = next - 1;\\n\\t\\tif (next === -1 || cur === -1) {\\n\\t\\t\\treturn money * useRatio;\\n\\t\\t}\\n\\n\\t\\tconst ratio = (ns.getHackingLevel() - hackingSteps[cur][0]) / (hackingSteps[next][0] - hackingSteps[cur][0]);\\n\\t\\tconst saveMoney = (hackingSteps[next][1] - hackingSteps[cur][1]) * ratio + hackingSteps[cur][1];\\n\\t\\tns.print(`Save money: ${saveMoney}`);\\n\\n\\t\\treturn money * useRatio - saveMoney;\\n\\t}\\n\\n\\tconst actions = [\\n\\t\\t{\\n\\t\\t\\tcost: () => {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\treturn ns.getUpgradeHomeRamCost();\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\treturn Infinity;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\tif (ns.upgradeHomeRam()) {\\n\\t\\t\\t\\t\\tns.print(`[home] Upgrade 'home' ram -> ${ns.getServerMaxRam(\\\"home\\\")}GB`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tcost: () => {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\treturn ns.getUpgradeHomeCoresCost();\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\treturn Infinity;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\tif (ns.upgradeHomeCores()) {\\n\\t\\t\\t\\t\\tns.print(`[home] Upgrade 'home' cores`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tcost: () => {\\n\\t\\t\\t\\tif (ns.hacknet.numNodes() >= maxNodes) {\\n\\t\\t\\t\\t\\treturn Infinity;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn ns.hacknet.getPurchaseNodeCost();\\n\\t\\t\\t},\\n\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\tconst res = ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tns.print(\\\"Purchased hacknet Node with index \\\" + res);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t];\\n\\n\\t/**\\n\\t * @param {number} i\\n\\t */\\n\\tfunction pushNodeActions(i) {\\n\\t\\tactions.push(\\n\\t\\t\\t{\\n\\t\\t\\t\\tcost: () => ns.hacknet.getLevelUpgradeCost(i, 10),\\n\\t\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(i, 10);\\n\\t\\t\\t\\t\\tns.print(`[${i}] Upgrade hacknet node Level`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tcost: () => ns.hacknet.getRamUpgradeCost(i, 2),\\n\\t\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeRam(i, 2);\\n\\t\\t\\t\\t\\tns.print(`[${i}] Upgrade hacknet node Ram`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tcost: () => ns.hacknet.getCoreUpgradeCost(i, 1),\\n\\t\\t\\t\\tupgrade: () => {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCore(i, 1);\\n\\t\\t\\t\\t\\tns.print(`[${i}] Upgrade hacknet node Core`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t)\\n\\t}\\n\\n\\tlet currentNodes = 0;\\n\\tfunction pushNodes() {\\n\\t\\tconst n = ns.hacknet.numNodes();\\n\\t\\tfor (let i = currentNodes; i < n; i++) {\\n\\t\\t\\tpushNodeActions(i);\\n\\t\\t}\\n\\t\\tcurrentNodes = n;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tpushNodes();\\n\\t\\tactions.sort((a, b) => a.cost() - b.cost());\\n\\n\\t\\tconst cost = actions[0].cost();\\n\\t\\tif (Number.isFinite(cost)) {\\n\\t\\t\\twhile (myMoney() < cost) {\\n\\t\\t\\t\\tns.print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t\\tactions[0].upgrade();\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buy-hacknet-2.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"buy-hacknet-2.ns\",\"url\":\"blob:file:///f00cfea7-97c6-42ec-9f13-72eb0ffd8c90\"}],\"ramUsage\":15.4,\"server\":\"sigma-cosmetics\",\"_hash\":\"e3add64603a054869004b10e240c6fb9e3b911df9ebbfec0eb5ee60f79454f4f\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {NS} ns\\n **/\\nexport function disableLog(ns) {\\n    ns.disableLog(\\\"disableLog\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"getServerMaxMoney\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMaxRam\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"getScriptRam\\\");\\n    ns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n    ns.disableLog(\\\"getUpgradeHomeRamCost\\\");\\n    ns.disableLog(\\\"getUpgradeHomeCoresCost\\\");\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} script\\n * @param {string} hostname\\n * @param {number} save\\n * @param {number} ratio\\n **/\\nexport function getCanRunThreads(ns, script, hostname, save = 0, ratio = 1) {\\n    const scriptRam = ns.getScriptRam(script, hostname);\\n    const serverRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname) - save;\\n    let numThreads = Math.floor(serverRam / scriptRam * ratio);\\n\\n    const serverAvailableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\n    if (numThreads < 1 && scriptRam < serverAvailableRam) return 1;\\n\\n    while (numThreads * scriptRam > serverAvailableRam) {\\n        numThreads--;\\n    }\\n    return numThreads;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} script\\n * @param {string} hostname\\n * @param {number} save\\n * @param {number} ratio\\n * @param {Array<string>} script_args\\n **/\\nexport async function copyAndRun(ns, script, hostname, save = 0, ratio = 1, ...script_args) {\\n    if (ns.scriptRunning(script, hostname) && !ns.isRunning(script, hostname, ...script_args)) {\\n        ns.scriptKill(script, hostname);\\n    }\\n    if (!ns.isRunning(script, hostname, ...script_args)) {\\n        if (hostname !== \\\"home\\\") {\\n            await ns.scp(script, \\\"home\\\", hostname);\\n        }\\n        const threads = getCanRunThreads(ns, script, hostname, save, ratio);\\n        if (threads > 0) {\\n            ns.exec(script, hostname, threads, ...script_args);\\n        }\\n    }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} hostname\\n **/\\nexport function jailbreakServer(ns, hostname) {\\n    let num = ns.getServerNumPortsRequired(hostname);\\n    if (num > 0 && ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(hostname);\\n        num--;\\n    }\\n    if (num > 0 && ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(hostname);\\n        num--;\\n    }\\n    if (num > 0 && ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(hostname);\\n        num--;\\n    }\\n    if (num > 0 && ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(hostname);\\n        num--;\\n    }\\n    if (num > 0 && ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(hostname);\\n        num--;\\n    }\\n    if (num <= 0) {\\n        ns.nuke(hostname);\\n        return true;\\n    }\\n    return false;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} parent\\n * @param {string} server\\n * @param {Array<string>} list\\n **/\\nexport function scanList(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n\\n        scanList(ns, server, child, list);\\n    }\\n}\\n\\n/**\\n * @typedef ServerFilter\\n * @type {object}\\n * @property {boolean=} enoughHackingLevel\\n * @property {boolean=} withoutPurchasedServers\\n * @property {boolean=} hasRootAccess\\n * @property {boolean=} hasMoney\\n * @property {boolean=} includeHome\\n * @property {number=} highestProduction\\n * @property {number=} minRam\\n */\\n\\n/**\\n * @param {NS} ns\\n * @param {ServerFilter} filter\\n **/\\nexport function listServers(ns, filter = {}) {\\n    /** @type {Array<string>} */\\n    let list = [];\\n    scanList(ns, '', 'home', list);\\n\\n    if (filter.enoughHackingLevel) {\\n        list = list.filter((hostname) => ns.getServerRequiredHackingLevel(hostname) <= ns.getHackingLevel());\\n    }\\n\\n    if (filter.withoutPurchasedServers) {\\n        const pserv = ns.getPurchasedServers();\\n        list = list.filter((hostname) => !pserv.includes(hostname));\\n    }\\n\\n    if (filter.hasRootAccess) {\\n        list = list.filter((hostname) => ns.hasRootAccess(hostname) || jailbreakServer(ns, hostname));\\n    }\\n\\n    if (filter.hasMoney) {\\n        list = list.filter((hostname) => ns.getServerMaxMoney(hostname) > 0);\\n    }\\n\\n    if (filter.minRam && filter.minRam > 0) {\\n        list = list.filter((hostname) => ns.getServerMaxRam(hostname) >= (filter.minRam || 0));\\n    }\\n\\n    if (filter.highestProduction && filter.highestProduction > 0 && list.length > filter.highestProduction) {\\n        /** @type {[string, number][]} */\\n        const serverMoney = list.map((hostname) => [hostname, ns.getServerMaxMoney(hostname)]);\\n        const highestProduction = serverMoney\\n            .sort((a, b) => b[1] - a[1])\\n            .slice(0, filter.highestProduction)\\n            .map(a => a[0]);\\n        list = list.filter((hostname) => highestProduction.includes(hostname));\\n    }\\n\\n    if (filter.includeHome) {\\n        list.unshift(\\\"home\\\");\\n    }\\n\\n    return list;\\n}\\n\\n/**\\n * @template T\\n * @param {T[]} array\\n **/\\nexport function shuffleArray(array) {\\n    for (let i = array.length - 1; i > 0; i--) {\\n        const j = Math.floor(Math.random() * (i + 1));\\n        [array[i], array[j]] = [array[j], array[i]];\\n    }\\n    return array\\n}\\n\\n/**\\n * @template T\\n * @param {T[]} array\\n * @param {number} perChunk\\n **/\\nexport function chunkArray(array, perChunk) {\\n    /** @type {T[][]} */\\n    const resultArray = [];\\n    return array.reduce((resultArray, item, index) => {\\n        const chunkIndex = Math.floor(index / perChunk);\\n\\n        if (!resultArray[chunkIndex]) {\\n            resultArray[chunkIndex] = []; // start a new chunk\\n        }\\n\\n        resultArray[chunkIndex].push(item);\\n\\n        return resultArray;\\n    }, resultArray);\\n}\",\"filename\":\"functions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":9.05,\"server\":\"sigma-cosmetics\",\"_hash\":\"345f1d242586de66622ba1d3435f9875a75aea145c9abc15090c5fb72be71ca0\",\"moduleSequenceNumber\":269}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":8.521999999999998,\"minDifficulty\":3,\"moneyAvailable\":6468750,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-339569.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,3,-1,-4,9,5,-9,-3,2,1,-8,-10,-10,4,5,-10,-2,0,1,2,-3,5,-6,-4,-5,-7,3,6,0,7,8,4,-9,6,10,-7,10,-10,-10,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"93.1.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.522,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1216.4100000001395,\"pid\":20,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.543000000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1216.4100000001395,\"pid\":21,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":270}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":271}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":272}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":8.438,\"minDifficulty\":5,\"moneyAvailable\":4220010,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-320417.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[23,7,160,133,34,47,108,179,136,189,2,120,147,86,57,15,90,15,124,16,4,18,81,114,8,37,70,22,95,80,157,127,27,75,59,13,17,110,99,99,44]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-399534-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum\",\"data\":70,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-105577-Netburners.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":652177654,\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"93.3.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":232.00999999999536,\"pid\":487,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":15,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":169.20999999999893,\"pid\":592,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":273}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":274}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":275}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":9.2,\"minDifficulty\":8,\"moneyAvailable\":21093750,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"30.8.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.80999999999776,\"pid\":558,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.80999999999776,\"pid\":559,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":276}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":277}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":278}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.695999999999998,\"minDifficulty\":7,\"moneyAvailable\":4583731,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-146520.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":882328271,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-999167.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[170,192,11,85,21,78,3,166,75,84,93,187,181,19,123,57,197,61,76,137,93,95,173,110,52],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"70.4.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999955,\"pid\":840,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":868,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":15,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":279}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":280}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":281}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":10.864,\"minDifficulty\":8,\"moneyAvailable\":8205660.357735673,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"6.6.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":57.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":211.20999999999654,\"pid\":519,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":32,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":135.61000000000084,\"pid\":651,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":282}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":283}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":284}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":77866684.47046953,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"42.6.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":12.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.639,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1417.8100000001853,\"pid\":29,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":7,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":285}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":286}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":287}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":8.496,\"minDifficulty\":5,\"moneyAvailable\":5068848,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-836892-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[88,102,47,5,45,48]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"37.0.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.648,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":968.4100000000833,\"pid\":30,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.81000000000061,\"pid\":750,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":7,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":288}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":289}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":290}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.204,\"minDifficulty\":5,\"moneyAvailable\":11250000,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"26.4.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.80999999999996,\"pid\":821,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":2,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.80999999999996,\"pid\":822,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":16,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":292}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":293}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.338,\"minDifficulty\":7,\"moneyAvailable\":67500000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-348130.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"69555\",-38],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-269855.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[69,74,153,79,89,157,139,172,107,65,38,91,54,63,103,37,194,183,113,108,27],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-642747-Netburners.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[29,16],[6,23],[36,14],[9,32]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"98.0.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.8100000000005,\"pid\":760,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":15,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.6100000000002,\"pid\":791,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":294}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":295}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":296}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.064,\"minDifficulty\":5,\"moneyAvailable\":16684340,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"4.5.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":26.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.80999999999996,\"pid\":823,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":14,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999955,\"pid\":839,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":297}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":298}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":299}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":9,\"minDifficulty\":9,\"moneyAvailable\":109564664.84908739,\"moneyMax\":170959069.6875,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":186,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-835641-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":931540363,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-923274.cct\",\"type\":\"Total Ways to Sum\",\"data\":91,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"45.8.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":300}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":301}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":302}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":15.924,\"minDifficulty\":14,\"moneyAvailable\":79874463.5,\"moneyMax\":133094227.5,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":237,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551853.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"25522818472\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-283895-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,10,9,6,2,0,10],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570353-Netburners.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"976401866\",67],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"9.7.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.8100000000005,\"pid\":759,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":15,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":855,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":303}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":304}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":305}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":11.969999999999999,\"minDifficulty\":10,\"moneyAvailable\":33778485,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"87.8.9.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":234.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.75,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1418.2100000001853,\"pid\":40,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":2,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.764,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":801.4100000000453,\"pid\":41,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":132,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":306}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":307}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":308}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":494,\"serverGrowth\":28}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"64.3.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":967,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"74.2.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":770,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-907324.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,0],[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,0],[0,0,0,1,1,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"33.7.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":510,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-742233.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"739821435179\",-21],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-709887.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,11],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-374560-Sector-12.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[5,8],[6,8,3],[5,2,4,6]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"78.7.8.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":234.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.771000000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":927.0100000000739,\"pid\":42,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":2,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.780000000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":784.6100000000415,\"pid\":43,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":132,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":309}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":310}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":311}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":365,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"82.9.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":26.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.609999999999985,\"pid\":857,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":15,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":312}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":313}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":314}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":220,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"77.7.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":535,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-985087.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,24],[4,6],[22,26],[2,11]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-567729-TianDiHui.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[26,16,8,34,2,42,32,14,6,46,13,7,37,8,10],[18,17,28,16,15,1,49,22,8,41,11,16,14,38,2],[25,10,45,16,28,14,35,32,19,1,22,15,1,20,8],[7,32,45,5,33,36,24,35,22,32,34,43,41,33,9],[46,46,43,8,1,43,11,47,7,3,33,1,15,28,9],[12,5,38,12,19,25,11,38,27,37,32,21,36,40,47],[41,45,12,24,46,40,44,4,37,40,24,21,25,5,27],[40,31,48,45,6,18,39,13,46,5,31,17,17,1,7],[39,14,39,15,31,17,9,41,12,20,1,33,43,25,38],[49,31,11,40,39,26,49,17,12,4,13,48,45,20,25],[1,41,44,39,15,20,37,15,22,43,7,29,27,33,32],[34,35,26,33,17,29,38,10,16,27,22,49,1,26,21]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"9.4.3.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":5.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.801,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1018.8100000000945,\"pid\":46,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.808,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":506.80999999997977,\"pid\":47,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":315}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":316}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":317}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"32.0.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"29.4.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"41.4.0.3\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv\",\"httpPortOpen\":false,\"ip\":\"70.6.7.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.818,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":571.0099999999929,\"pid\":48,\"ramUsage\":1.75,\"server\":\"pserv\",\"threads\":375,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.825,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":571.0099999999929,\"pid\":49,\"ramUsage\":1.75,\"server\":\"pserv\",\"threads\":4306,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":318}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":319}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":320}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"9.8.4.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7574,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.8330000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1620.2100000002313,\"pid\":50,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":4297,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.841,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1221.6100000001406,\"pid\":51,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":31,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":321}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":322}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":323}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"18.8.2.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1907.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.61000000000087,\"pid\":707,\"ramUsage\":1.7,\"server\":\"pserv-1\",\"threads\":1044,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.81000000000063,\"pid\":736,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":76,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":324}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":325}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":326}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"65.2.0.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3426.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":115.2100000000011,\"pid\":683,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":1958,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":328}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":329}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"87.0.1.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7645.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.885,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":927.410000000074,\"pid\":56,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":790,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.8910000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":759.8100000000359,\"pid\":57,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":3579,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":330}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":332}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"58.6.8.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":61.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7385.899,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1418.8100000001855,\"pid\":58,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"threads\":35,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":333}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":334}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":335}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"61.9.9.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7197.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":106.81000000000098,\"pid\":695,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":4063,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":863,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":336}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":338}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"43.4.8.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7890.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.2100000000008,\"pid\":648,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":2543,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.209999999999923,\"pid\":825,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1966,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":340}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":341}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"18.6.7.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7182,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.41000000000057,\"pid\":642,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":4053,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"pid\":799,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":51,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":342}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":343}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":344}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"74.8.7.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1420.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.40999999999997,\"pid\":815,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":257,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":842,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":571,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":346}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":347}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"4.9.8.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8057,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.40999999999914,\"pid\":597,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":3719,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":852,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":885,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":348}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":349}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-9\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":350}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"68.9.4.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7507.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.81000000000039,\"pid\":767,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"threads\":4255,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.21000000000021,\"pid\":787,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"threads\":35,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":352}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-10\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":353}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"88.0.2.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8044.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.40999999999997,\"pid\":816,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"threads\":3641,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.809999999999953,\"pid\":835,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"threads\":956,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":354}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":355}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-11\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":356}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"44.2.1.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1437.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.809999999999953,\"pid\":836,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":297,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":864,\"ramUsage\":1.7,\"server\":\"pserv-12\",\"threads\":540,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":357}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":358}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-12\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":359}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"23.8.6.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":908.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.809999999999953,\"pid\":837,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":53,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":865,\"ramUsage\":1.7,\"server\":\"pserv-13\",\"threads\":480,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":360}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-13\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":362}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"85.1.9.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":363}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":364}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-14\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":365}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"8.7.2.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":366}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":367}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-15\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":368}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"43.0.4.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7582.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.009999999999938,\"pid\":831,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":338,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":869,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":3995,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":369}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":370}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-16\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":371}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"3.0.3.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":537.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":853,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":307,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":372}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":373}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-17\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":374}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"18.0.4.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1317.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"pid\":860,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":310,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2811240,456,0,0]},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1499.328,\"onlineMoneyMade\":2811240,\"onlineRunningTime\":5.810000000000003,\"pid\":866,\"ramUsage\":1.7,\"server\":\"pserv-18\",\"threads\":456,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":375}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":376}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-18\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":377}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"48.7.9.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"pid\":861,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":375,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"pid\":862,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":4306,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":378}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":379}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-19\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":380}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"5.0.4.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":808.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999984,\"pid\":854,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":56,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":870,\"ramUsage\":1.7,\"server\":\"pserv-20\",\"threads\":418,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":382}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-20\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":383}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"7.9.9.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7540.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7386.107,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1237.8100000001443,\"pid\":89,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":4276,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7386.113,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":793.0100000000434,\"pid\":90,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":33,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":384}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":385}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-21\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":386}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"64.5.2.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7544.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7386.121,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1619.6100000002311,\"pid\":91,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":4278,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7386.127,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1221.0100000001405,\"pid\":92,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":33,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":388}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-22\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":389}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"67.0.0.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7540.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weak.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":7386.136,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":93,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":33,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":744,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":4276,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args)\",\"filename\":\"weak.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"12ccac5f02cc614c326c161cd0484a4ddeee64a55f709b0dbcf7f5e27be65d67\",\"moduleSequenceNumber\":390}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args)\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"cbe4b256cd373e45b3706ecb259d2d01fce3779249541e3ad1df5f4517814965\",\"moduleSequenceNumber\":391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args)\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-23\",\"_hash\":\"5f53f5276d5283c98cec50c1fa5eb74a7e5dd3b7191b3d4a57d3d9932a8e8a1b\",\"moduleSequenceNumber\":392}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":48.89384205128208,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":3850.4363333293663}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":84756.12209997934}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":6661.533204608373}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":29730.46932559753}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":15301.202943107335}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\",\"ssh\":\"run BruteSSH.exe\",\"ftp\":\"run FTPCrack.exe\",\"smtp\":\"run relaySMTP.exe\",\"http\":\"run HTTPWorm.exe\",\"sql\":\"run SQLInject.exe\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1641819601210","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1641819601221"}}